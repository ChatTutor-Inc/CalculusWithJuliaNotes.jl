{
  "hash": "7ab8361570c3e19de9d884ea5d541d09",
  "result": {
    "markdown": "# Functions\n\n\n\nThis section will use the following add-on packages:\n\n``` {.julia .cell-code}\nusing CalculusWithJulia, Plots\n```\n\n\n\n\n---\n\n\nA mathematical [function](http://en.wikipedia.org/wiki/Function_(mathematics)) is defined abstractly by:\n\n\n> **Function:** A function is a *relation* which assigns to each element in the domain a *single* element in the range. A **relation** is a set of ordered pairs, $(x,y)$. The set of first coordinates is the domain, the set of second coordinates the range of the relation.\n\n\n\nThat is, a function gives a correspondence between  values in its domain with  values in its range.\n\n\nThis definition is abstract, as functions can be very general. With single-variable calculus, we generally specialize to real-valued functions of a single variable (*univariate, scalar functions*). These typically have the correspondence given by a rule, such as $f(x) = x^2$ or $f(x) = \\sqrt{x}$. The function's domain may be implicit (as in all $x$ for which the rule is defined) or may be explicitly given as part of the rule. The function's range is then the image of its domain, or the set of all $f(x)$ for each $x$ in the domain ($\\{f(x): x \\in \\text{ domain}\\}$).\n\n\nSome examples of mathematical functions are:\n\n\n\n$$\nf(x) = \\cos(x), \\quad g(x) = x^2 - x, \\quad h(x) = \\sqrt{x}, \\quad\ns(x) = \\begin{cases} -1 & x < 0\\\\1&x>0\\end{cases}.\n$$\n\n\nFor these examples, the domain of both $f(x)$ and $g(x)$ is all real values of $x$, where as for $h(x)$ it is implicitly just the set of non-negative numbers, $[0, \\infty)$. Finally, for $s(x)$, we can see that the domain is defined for every $x$ but $0$.\n\n\nIn general the range is harder to identify than the domain, and this is the case for these functions too. For $f(x)$ we may know the $\\cos$ function is trapped in $[-1,1]$ and it is intuitively clear than all values in that set are possible. The function $h(x)$ would have range $[0,\\infty)$.  The $s(x)$ function is either $-1$ or $1$, so only has two possible values in its range.  What about $g(x)$? It is a parabola that opens upward, so any $y$ values below the $y$ value of its vertex will not appear in the range. In this case, the symmetry indicates that the vertex will be at $(1/2, -1/4)$, so the range is $[-1/4, \\infty)$.\n\n\n:::{.callout-note}\n## Note\n**Thanks to Euler (1707-1783):** The formal idea of a function is a relatively modern concept in mathematics.  According to [Dunham](http://www.maa.org/sites/default/files/pdf/upload_library/22/Ford/dunham1.pdf),\n\n:::\n\nEuler defined a function as an \"analytic expression composed in any way   whatsoever of the variable quantity and numbers or constant   quantities.\" He goes on to indicate that as Euler matured, so did   his notion of function, ending up closer to the modern idea of a   correspondence not necessarily tied to a particular formula or   “analytic expression.” He finishes by saying: \"It is fair to say   that we now study functions in analysis because of him.\"\n\n\nWe will see that defining functions within `Julia` can be as simple a concept as Euler started with, but that the more abstract concept has a great advantage that is exploited in the design of the language.\n\n\n## Defining simple mathematical functions\n\n\nThe notation `Julia` uses to define simple mathematical functions could not be more closely related to how they are written mathematically. For example, the functions $f(x)$, $g(x)$, and $h(x)$ above may be defined by:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nf(x) = cos(x)\ng(x) = x^2 - x\nh(x) = sqrt(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nh (generic function with 1 method)\n```\n:::\n:::\n\n\nThe left-hand sign of the equals sign is an assignment. In this use, a function with a given signature is defined and attached to a method table for the given function name. The right-hand side is simply `Julia` code to compute the *rule* corresponding to the function.\n\n\nCalling the function also follows standard math notation:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nf(pi), g(2), h(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n(-1.0, 2, 2.0)\n```\n:::\n:::\n\n\nFor typical cases like the three above, there isn't really much new to learn.\n\n\n:::{.callout-note}\n## Note\nThe equals sign in `Julia`  always indicates either an assignment or a mutation of the object on the left side. The definition of a function above is an *assignment*, in that a function is added (or modified) in a table holding the methods associated with the function's name.\n\nThe equals sign restricts the expressions available on the *left*-hand side to a) a variable name, for assignment; b) mutating an object at an index, as in `xs[1]`; c) mutating a property of a stuct; or d) a function assignment following this form `function_name(args...)`.\n\nWhereas function definitions and usage in `Julia` mirrors standard math notation; equations in math are not so mirrored in `Julia`. In mathematical equations, the left-hand of an equation is typically a complicated algebraic expression. Not so with `Julia`, where the left hand side of the equals sign is prescribed and quite limited.\n\n:::\n\n### The domain of a function\n\n\nFunctions in `Julia` have an implicit domain, just as they do mathematically. In the case of $f(x)$ and $g(x)$, the right-hand side is defined for all real values of $x$, so the domain is all $x$. For $h(x)$ this isn't the case, of course. Trying to call $h(x)$ when $x < 0$ will give an error:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nh(-1)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: DomainError with -1.0:\nsqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n```\n:::\n:::\n\n\nThe `DomainError` is one of many different error types `Julia` has, in this case it is quite apt: the value $-1$ is not in the domain of the function.\n\n\n### Equations, functions, calling a function\n\n\nMathematically we tend to blur the distinction between the equation\n\n\n\n$$\ny = 5/9 \\cdot (x - 32)\n$$\n\n\nand the function\n\n\n\n$$\nf(x) = 5/9 \\cdot (x - 32)\n$$\n\n\nIn fact, the graph of a function $f(x)$ is simply defined as the graph of the equation $y=f(x)$. There is a distinction in `Julia` as a command such as\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nx = -40\ny = 5/9 * (x - 32)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n-40.0\n```\n:::\n:::\n\n\nwill evaluate the right-hand side with the value of `x` bound at the time of assignment to `y`, whereas assignment to a function\n\n::: {.cell hold='true' execution_count=8}\n``` {.julia .cell-code}\nf(x) = 5/9 * (x - 32)\nf(72)\t\t\t\t## room temperature\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n22.22222222222222\n```\n:::\n:::\n\n\nwill create a function object with a value of `x` determined at a later time - the time the function is called. So the value of `x` defined when the function is created is not important here (as the value of `x` used by `f` is passed in as an argument).\n\n\nWithin `Julia`, we make note of the distinction between a function object versus a function call. In the definition `f(x)=cos(x)`, the variable `f` refers to a function object, whereas the expression `f(pi)` is a function call. This mirrors the math notation where an $f$ is used when properties of a function are being emphasized (such as $f \\circ g$ for composition) and $f(x)$ is used when the values related to the function are being emphasized (such as saying \"the plot of the equation $y=f(x)$).\n\n\nDistinguishing these three related but different concepts (equations, function objects, and function calls) is important when modeling on the computer.\n\n\n### Cases\n\n\nThe definition of $s(x)$ above has two cases:\n\n\n\n$$\ns(x) = \\begin{cases} -1 & s < 0\\\\ 1 & s > 0. \\end{cases}\n$$\n\n\nWe learn to read this as: when $s$ is less than $0$, then the answer is $-1$. If $s$ is greater than $0$ the answer is $1.$ Often - but not in this example - there is an \"otherwise\" case to catch those values of $x$ that are not explicitly mentioned. As there is no such \"otherwise\" case here, we can see that this function has no definition when $x=0$. This function is often called the \"sign\" function and is also defined by $\\lvert x\\rvert/x$. (`Julia`'s `sign` function actually defines `sign(0)` to be `0`.)\n\n\nHow do we create conditional statements in `Julia`? Programming languages generally have \"if-then-else\" constructs to handle conditional evaluation. In `Julia`, the following code will handle the above condition:\n\n``` {.julia .cell-code}\nif x < 0\n  -1\nelseif x > 0\n   1\nend\n```\n\n\nThe \"otherwise\" case would be caught with an `else` addition. So, for example, this would implement `Julia`'s definition of `sign` (which also assigns $0$ to $0$):\n\n``` {.julia .cell-code}\nif x < 0\n  -1\nelseif x > 0\n   1\nelse\n   0\nend\n```\n\n\nThe conditions for the `if` statements are expressions that evaluate to either `true` or `false`, such as generated by the Boolean operators `<`, `<=`, `==`, `!-`, `>=`, and `>`.\n\n\nIf familiar with `if` conditions, they are natural to use. However, for simpler cases of \"if-else\" `Julia` provides the more convenient *ternary* operator: `cond ? if_true : if_false`. (The name comes from the fact that there are three arguments specified.) The ternary operator checks the condition and if true returns the first expression, whereas if the condition is false the second condition is returned. (Another useful control flow construct is [short-circuit](https://docs.julialang.org/en/v1/manual/control-flow/#Short-Circuit-Evaluation) evaluation.)\n\n\nFor example, here is one way to define an absolute value function:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nabs_val(x) = x >= 0 ? x : -x\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nabs_val (generic function with 1 method)\n```\n:::\n:::\n\n\nThe condition is `x >= 0` - or is `x` non-negative? If so, the value `x` is used, otherwise `-x` is used.\n\n\nHere is a means to implement a function which takes the larger of `x` or `10`:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nbigger_10(x) = x > 10 ? x : 10.0\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nbigger_10 (generic function with 1 method)\n```\n:::\n:::\n\n\n(This could also utilize the `max` function: `f(x) = max(x, 10.0)`.)\n\n\nOr similarly, a function to represent a cell phone plan where the first $500$ minutes are $20$ dollars and every additional minute is $5$ cents:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\ncellplan(x) = x < 500 ? 20.0 : 20.0 + 0.05 * (x-500)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\ncellplan (generic function with 1 method)\n```\n:::\n:::\n\n\n:::{.callout-warning}\n## Warning\nType stability. These last two definitions used `10.0` and `20.0` instead of the integers `10` and `20` for the answer. Why the extra typing? When `Julia` can predict the type of the output from the type of inputs, it can be more efficient. So when possible, we help out and ensure the output is always the same type.\n\n:::\n\n##### Example\n\n\nThe `ternary` operator can be used to define an explicit domain. For example, a falling body might have height given by $h(t) = 10 - 16t^2$. This model only applies for non-negative $t$ and non-negative $h$ values. So, in particular $0 \\leq t \\leq \\sqrt{10/16}$. To implement this function we might have:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nh(t) = 0 <= t <= sqrt(10/16) ? 10.0 - 16t^2 : error(\"t is not in the domain\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nh (generic function with 1 method)\n```\n:::\n:::\n\n\n#### Nesting ternary operators\n\n\nThe function `s(x)` isn't quite so easy to implement, as there isn't an \"otherwise\" case. We could use an `if` statement, but instead illustrate using a second, nested ternary operator:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\ns(x) = x < 0 ? -1 :\n    x > 0 ? 1 : error(\"0 is not in the domain\")\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\ns (generic function with 1 method)\n```\n:::\n:::\n\n\nWith nested ternary operators, the advantage over the `if` condition is not always compelling, but for simple cases the ternary operator is quite useful.\n\n\n## Functions defined with the \"function\" keyword\n\n\nFor more complicated functions, say one with a few steps to compute, an alternate form for defining a function can be used:\n\n\n\n```{verbatim}\nfunction function_name(function_arguments)\n  ...function_body...\nend\n```\n\n\nThe last value computed is returned unless the `function_body` contains an explicit `return` statement.\n\n\nFor example, the following is a more verbose way to define $sq(x) = x^2$:\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nfunction sq(x)\n  return x^2\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nsq (generic function with 1 method)\n```\n:::\n:::\n\n\nThe line `return x^2`, could have just been `x^2` as it is the last (and) only line evaluated.\n\n\n:::{.callout-note}\n## Note\nThe `return` keyword is not a function, so is not called with parentheses. An emtpy `return` statement will return a value of `nothing`.\n\n:::\n\n##### Example\n\n\nImagine we have the following complicated function related to the trajectory of a [projectile](http://www.researchgate.net/publication/230963032_On_the_trajectories_of_projectiles_depicted_in_early_ballistic_woodcuts) with wind resistance:\n\n\n\n$$\n\tf(x) = \\left(\\frac{g}{k v_0\\cos(\\theta)} + \\tan(\\theta) \\right) x + \\frac{g}{k^2}\\ln\\left(1 - \\frac{k}{v_0\\cos(\\theta)} x \\right)\n$$\n\n\nHere $g$ is the gravitational constant $9.8$ and $v_0$, $\\theta$ and $k$ parameters, which we take to be $200$, $45$ degrees and $1/2$ respectively. With these values, the above function can be computed when $x=100$ with:\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nfunction trajectory(x)\n  g, v0, theta, k = 9.8, 200, 45*pi/180, 1/2\n  a = v0 * cos(theta)\n\n  (g/(k*a) + tan(theta))* x + (g/k^2) * log(1 - k/a*x)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\ntrajectory (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\ntrajectory(100)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n96.7577179163216\n```\n:::\n:::\n\n\nBy using a multi-line function our work is much easier to look over for errors.\n\n\n##### Example: the secant method for finding a solution to $f(x) = 0$.\n\n\nThis next example, shows how using functions to collect a set of computations for simpler reuse can be very helpful.\n\n\nAn old method for finding a zero of an equation is the [secant method](https://en.wikipedia.org/wiki/Secant_method). We illustrate the method with the function $f(x) = x^2 - 2$. In an upcoming example we see how to create a function to evaluate the secant line between $(a,f(a))$ and $(b, f(b))$ at any point. In this example, we define a function to compute the $x$ coordinate of where the secant line crosses the $x$ axis. This can be defined as follows:\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nfunction secant_intersection(f, a, b)\n   # solve 0 = f(b) + m * (x-b) where m is the slope of the secant line\n   # x = b - f(b) / m\n   m = (f(b) - f(a)) / (b - a)\n   b - f(b) / m\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nsecant_intersection (generic function with 1 method)\n```\n:::\n:::\n\n\nWe utilize this as follows. Suppose we wish to solve $f(x) = 0$ and we have two \"rough\" guesses for the answer. In our example, we wish to solve $q(x) = x^2 - 2$ and our \"rough\" guesses are $1$ and $2$. Call these values $a$ and $b$. We *improve* our rough guesses by finding a value $c$ which is the intersection point of the secant line.\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nq(x) = x^2 - 2\n𝒂, 𝒃 = 1, 2\n𝒄 = secant_intersection(q, 𝒂, 𝒃)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n1.3333333333333335\n```\n:::\n:::\n\n\nIn our example, we see that in trying to find an answer to $f(x) = 0$ ( $\\sqrt{2}\\approx 1.414\\dots$) our value found from the intersection point is a better guess than either $a=1$ or $b=2$:\n\n::: {.cell execution_count=21}\n\n::: {.cell-output .cell-output-display execution_count=20}\n![](functions_files/figure-html/cell-22-output-1.svg){}\n:::\n:::\n\n\nStill,  `q(𝒄)` is not really close to $0$:\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\nq(𝒄)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n-0.22222222222222188\n```\n:::\n:::\n\n\n*But* it is much closer than either $q(a)$ or $q(b)$, so it is an improvement. This suggests renaming $a$ and $b$ with the old $b$ and $c$ values and trying again we might do better still:\n\n::: {.cell hold='true' execution_count=23}\n``` {.julia .cell-code}\n𝒂, 𝒃 = 𝒃, 𝒄\n𝒄 = secant_intersection(q, 𝒂, 𝒃)\nq(𝒄)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n-0.03999999999999959\n```\n:::\n:::\n\n\nYes, now the function value at this new $c$ is even closer to $0$. Trying a few more times we see we just get closer and closer. He we start again to see the progress\n\n::: {.cell hold='true' execution_count=24}\n``` {.julia .cell-code}\n𝒂,𝒃 = 1, 2\nfor step in 1:6\n    𝒂, 𝒃 = 𝒃, secant_intersection(q, 𝒂, 𝒃)\n    current = (c=𝒃, qc=q(𝒃))\n    @show current\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncurrent = (c = 1.3333333333333335, qc = -0.22222222222222188)\ncurrent = (c = 1.4000000000000001, qc = -0.03999999999999959)\ncurrent = (c = 1.4146341463414633, qc = 0.0011897679952408424)\ncurrent = (c = 1.41421143847487, qc = -6.007286838860537e-6)\ncurrent = (c = 1.4142135620573204, qc = -8.931455575122982e-10)\ncurrent = (c = 1.4142135623730954, qc = 8.881784197001252e-16)\n```\n:::\n:::\n\n\nNow our guess $c$ is basically the same as `sqrt(2)`. Repeating the above leads to only a slight improvement in the guess, as we are about as close as floating point values will allow.\n\n\nHere we see a visualization with all these points. As can be seen, it quickly converges at the scale of the visualization, as we can't see much closer than `1e-2`.\n\n::: {.cell hold='true' execution_count=25}\n\n::: {.cell-output .cell-output-display execution_count=24}\n![](functions_files/figure-html/cell-26-output-1.svg){}\n:::\n:::\n\n\nIn most cases, this method can fairly quickly find a zero provided two good starting points are used.\n\n\n## Parameters, function context (scope), keyword arguments\n\n\nConsider two functions implementing the slope-intercept form and point-slope form of a line:\n\n\n\n$$\nf(x) = m \\cdot x + b, \\quad g(x) = y_0 + m \\cdot (x - x_0).\n$$\n\n\nBoth functions use the variable $x$, but there is no confusion, as we learn that this is just a dummy variable to be substituted for and so could have any name. Both also share a variable $m$ for a slope. Where does that value come from? In practice, there is a context that gives an answer. Despite the same name, there is no expectation that the slope will be the same for each function if the context is different. So when parameters are involved, a function involves a rule and a context to give specific values to the parameters. Euler had said initially that functions  composed of \"the variable quantity and numbers or constant quantities.\" The term \"variable,\" we still use, but instead of \"constant quantities,\" we use the name \"parameters.\"\n\n\nSomething similar is also true with `Julia`.  Consider the example of writing a function to model a linear equation with slope $m=2$ and $y$-intercept $3$. A typical means to do this would be to define constants, and then use the familiar formula:\n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\nm, b = 2, 3\nmxb(x) = m*x + b\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nmxb (generic function with 1 method)\n```\n:::\n:::\n\n\nThis will work as expected. For example, $f(0)$ will be $b$  and $f(2)$ will be $7$:\n\n::: {.cell execution_count=27}\n``` {.julia .cell-code}\nmxb(0), mxb(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n(3, 7)\n```\n:::\n:::\n\n\nAll fine, but what if somewhere later the values for $m$ and $b$ were *redefined*, say with $m,b = 3,2$?\n\n\nNow what happens with $f(0)$? When $f$ was defined `b` was $3$, but now if we were to call `f`, `b` is $2$. Which value will we get? More generally, when `f` is being evaluated in what context does `Julia` look up the bindings for the variables it encounters? It could be that the values are assigned when the function is defined, or it could be that the values for the parameters are resolved when the function is called. If the latter, what context will be used?\n\n\nBefore discussing this, let's just see in this case:\n\n::: {.cell hold='true' execution_count=28}\n``` {.julia .cell-code}\nm, b = 3, 2\nmxb(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n2\n```\n:::\n:::\n\n\nSo the `b` is found from the currently stored value. This fact can be exploited. we can write template-like functions, such as `f(x)=m*x+b` and reuse them just by updating the parameters separately.\n\n\nHow `Julia` resolves what a variable refers to is described in detail in the manual page [Scope of Variables](https://docs.julialang.org/en/v1/manual/variables-and-scoping/). In this case, the function definition finds variables in the context of where the function was defined, the main workspace. As seen, this context can be modified after the function definition and prior to the function call. It is only when `b` is needed, that the context is consulted, so the most recent binding is retrieved.  Contexts (more formally known as environments) allow the user to repurpose variable names without there being name collision. For example, we typically use `x` as a function argument, and different contexts allow this `x` to refer to different values.\n\n\nMostly this works as expected, but at times it can be complicated to reason about. In our example, definitions of the parameters can be forgotten, or the same variable name may have been used for some other purpose. The potential issue is with the parameters, the value for `x` is straightforward, as it is passed into the function. However, we can also pass the parameters, such as $m$ and $b$, as arguments.  For parameters, we suggest using [keyword](https://docs.julialang.org/en/v1/manual/functions/#Keyword-Arguments) arguments. These allow the specification of parameters, but also give a default value. This can make usage explicit, yet still convenient. For example, here is an alternate way of defining a line with parameters `m` and `b`:\n\n::: {.cell execution_count=29}\n``` {.julia .cell-code}\nmxplusb(x; m=1, b=0) = m*x + b\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nmxplusb (generic function with 1 method)\n```\n:::\n:::\n\n\nThe right-hand side is identical to before, but the left hand side is different. Arguments defined *after* a semicolon are keyword arguments. They are specified as `var=value` (or `var::Type=value` to restrict the type) where the value is used as the default, should a value not be specified when the function is called.\n\n\nCalling a function with keyword arguments can be identical to before:\n\n::: {.cell execution_count=30}\n``` {.julia .cell-code}\nmxplusb(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n0\n```\n:::\n:::\n\n\nDuring this call, values for `m` and `b` are found from how the function is called, not the main workspace. In this case, nothing is specified so the defaults of $m=1$ and $b=0$ are used. Whereas, this call will use the user-specified values for `m` and `b`:\n\n::: {.cell execution_count=31}\n``` {.julia .cell-code}\nmxplusb(0; m=3, b=2)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n2\n```\n:::\n:::\n\n\nKeywords are used to mark the parameters whose values are to be changed from the default. Though one can use *positional arguments* for parameters - and there are good reasons to do so - using keyword arguments is a good practice if performance isn't paramount, as their usage is more explicit yet the defaults mean that a minimum amount of typing needs to be done.\n\n\n##### Example\n\n\nIn the example for multi-line functions we hard coded many variables inside the body of the function. In practice it can be better to pass these in as parameters along the lines of:\n\n::: {.cell hold='true' execution_count=32}\n``` {.julia .cell-code}\nfunction trajectory(x; g = 9.8, v0 = 200, theta = 45*pi/180, k = 1/2)\n  a = v0 * cos(theta)\n  (g/(k*a) + tan(theta))* x + (g/k^2) * log(1 - k/a*x)\nend\ntrajectory(100)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n96.7577179163216\n```\n:::\n:::\n\n\n### The `f(x,p)` style for parameterization\n\n\nAn alternative to keyword arguments is to bundle the parameters into a container and pass them as a single argument to the function. The idiom in `Julia` is to use the *second* argument for parameters, or `f(x, p)` for the function argument specifications. This style is used in the very popular `SciML` suite of packages.\n\n\nFor example, here we use a *named tuple* to pass parameters to `f`:\n\n::: {.cell hold='true' execution_count=33}\n``` {.julia .cell-code}\nfunction trajectory(x ,p)\n    g, v0, theta, k = p.g, p.v0, p.theta, p.k # unpack parameters\n\n    a = v0 * cos(theta)\n    (g/(k*a) + tan(theta))* x + (g/k^2) * log(1 - k/a*x)\nend\n\np = (g=9.8, v0=200, theta = 45*pi/180, k=1/2)\ntrajectory(100, p)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n96.7577179163216\n```\n:::\n:::\n\n\nThe style isn't so different from using keyword arguments, save the extra step of unpacking the parameters. The *big* advantage is consistency – the function is always called in an identical manner regardless of the number of parameters (or variables).\n\n\n## Multiple dispatch\n\n\nThe concept of a function is of much more general use than its restriction to mathematical functions of single real variable. A natural application comes from describing basic properties of geometric objects. The following function definitions likely will cause no great concern when skimmed over:\n\n::: {.cell hold='true' execution_count=34}\n``` {.julia .cell-code}\nArea(w, h) = w * h\t\t                           # of a rectangle\nVolume(r, h) = pi * r^2 * h\t                       # of a cylinder\nSurfaceArea(r, h) = pi * r * (r + sqrt(h^2 + r^2)) # of a right circular cone, including the base\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nSurfaceArea (generic function with 1 method)\n```\n:::\n:::\n\n\nThe right-hand sides may or may not be familiar, but it should be reasonable to believe that if push came to shove, the formulas could be looked up. However, the left-hand sides are subtly different - they have two arguments, not one. In `Julia` it is trivial to define functions with multiple arguments - we just did.\n\n\nEarlier we saw the `log` function can use a second argument to express the base. This function is basically defined by `log(b,x)=log(x)/log(b)`. The `log(x)` value is the natural log, and this definition just uses the change-of-base formula for logarithms.\n\n\nBut not so fast, on the left side is a function with two arguments and on the right side the functions have one argument - yet they share the same name. How does `Julia` know which to use? `Julia` uses the number, order, and *type* of the positional arguments passed to a function to determine which function definition to use. This is technically known as [multiple dispatch](http://en.wikipedia.org/wiki/Multiple_dispatch) or **polymorphism**. As a feature of the language, it can be used to greatly simplify the number of functions the user must learn. The basic idea is that many functions are \"generic\" in that they have methods which will work differently in different scenarios.\n\n\n:::{.callout-warning}\n## Warning\nMultiple dispatch is very common in mathematics. For example, we learn different ways to add: integers (fingers, carrying), real numbers (align the decimal points), rational numbers (common denominators), complex numbers (add components), vectors (add components), polynomials (combine like monomials), ... yet we just use the same `+` notation for each operation. The concepts are related, the details different.\n\n:::\n\n`Julia` is similarly structured.  `Julia` terminology would be to call the operation \"`+`\" a *generic function* and the different implementations *methods* of \"`+`\". This allows the user to just need to know a smaller collection of generic concepts yet still have the power of detail-specific implementations.  To see how many different methods are defined in the base `Julia` language for the `+` operator, we can use the command `methods(+)`. As there are so many ($\\approx 200$) and that number is growing, we illustrate how many different logarithm methods are implemented for \"numbers:\"\n\n::: {.cell execution_count=35}\n``` {.julia .cell-code}\nmethods(log, (Number,))\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n# 11 methods for generic function <b>log</b>:<ul><li> log(::<b>Static.StaticFloat64{M}</b>)<i> where M</i> in Static at <a href=\"file:///Users/verzani/.julia/packages/Static/sVI3g/src/Static.jl\" target=\"_blank\">/Users/verzani/.julia/packages/Static/sVI3g/src/Static.jl:460</a></li> <li> log(d::<b>ForwardDiff.Dual{T}</b>)<i> where T</i> in ForwardDiff at <a href=\"file:///Users/verzani/.julia/packages/ForwardDiff/Z1voq/src/dual.jl\" target=\"_blank\">/Users/verzani/.julia/packages/ForwardDiff/Z1voq/src/dual.jl:238</a></li> <li> log(x::<b>Float32</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/special/log.jl#L266\" target=\"_blank\">special/log.jl:266</a></li> <li> log(::<b>Irrational{:ℯ}</b>) in Base.MathConstants at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/mathconstants.jl#L123\" target=\"_blank\">mathconstants.jl:123</a></li> <li> log(x::<b>SymPy.Sym</b>) in SymPy at <a href=\"https://github.com/JuliaPy/SymPy.jl/tree/3736343b8ff1609100704f3ee5d8e1d55e1ca650//src/mathfuns.jl#L43\" target=\"_blank\">/Users/verzani/julia/SymPy/src/mathfuns.jl:43</a></li> <li> log(x::<b>BigFloat</b>) in Base.MPFR at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/mpfr.jl#L678\" target=\"_blank\">mpfr.jl:678</a></li> <li> log(x::<b>Float64</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/special/log.jl#L269\" target=\"_blank\">special/log.jl:269</a></li> <li> log(a::<b>ComplexF16</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/math.jl#L1202\" target=\"_blank\">math.jl:1202</a></li> <li> log(z::<b>Complex</b>) in Base at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/complex.jl#L608\" target=\"_blank\">complex.jl:608</a></li> <li> log(a::<b>Float16</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/math.jl#L1201\" target=\"_blank\">math.jl:1201</a></li> <li> log(x::<b>Real</b>) in Base.Math at <a href=\"https://github.com/JuliaLang/julia/tree/742b9abb4dd4621b667ec5bb3434b8b3602f96fd/base/math.jl#L1218\" target=\"_blank\">math.jl:1218</a></li> </ul>\n```\n:::\n:::\n\n\n(The arguments have *type annotations* such as `x::Float64` or `x::BigFloat`. `Julia` uses these to help resolve which method should be called for a given set of arguments. This allows for different operations depending on the variable type. For example, in this case, the `log` function for `Float64` values uses a fast algorithm, whereas for `BigFloat` values an algorithm that can handle multiple precision is used.)\n\n\n##### Example: An application of composition and multiple dispatch\n\n\nAs mentioned `Julia`'s multiple dispatch allows multiple functions with the same name. The function that gets selected depends not just on the type of the arguments, but also on the number of arguments given to the function. We can exploit this to simplify our tasks. For example, consider this optimization problem:\n\n\n> For all rectangles of perimeter $20$, what is the one with largest area?\n\n\n\nThe start of this problem is to represent the area in terms of one variable. We see next that composition can simplify this task, which when done by hand requires a certain amount of algebra.\n\n\nRepresenting the area of a rectangle in terms of two variables is easy, as the familiar formula of width times height applies:\n\n::: {.cell execution_count=36}\n``` {.julia .cell-code}\nArea(w, h) = w * h\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nArea (generic function with 1 method)\n```\n:::\n:::\n\n\nBut the other fact about this problem - that the perimeter is $20$ - means that height depends on width. For this question, we can see that $P=2w + 2h$ so that - as a function - `height` depends on `w` as follows:\n\n::: {.cell execution_count=37}\n``` {.julia .cell-code}\nheight(w) = (20  - 2*w)/2\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\nheight (generic function with 1 method)\n```\n:::\n:::\n\n\nBy hand we would substitute this last expression into that for the area and simplify (to get $A=w\\cdot (20-2 \\cdot w)/2 = -w^2 + 10$). However, within `Julia` we can let *composition* do the substitution and leave the algebraic simplification for `Julia` to do:\n\n::: {.cell execution_count=38}\n``` {.julia .cell-code}\nArea(w) = Area(w, height(w))\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\nArea (generic function with 2 methods)\n```\n:::\n:::\n\n\nThis might seem odd, just like with `log`, we now  have two *different* but related functions named `Area`. Julia will decide which to use based on the number of arguments when the function is called. This setup allows both to be used on the same line, as above. This usage style is not so common with many computer languages, but is a feature of `Julia` which is built around the concept of *generic* functions with multiple dispatch rules to decide which rule to call.\n\n\nFor example, jumping ahead a bit, the `plot` function of `Plots`  expects functions of a single numeric variable. Behind the scenes, then the function `A(w)` will be used in this graph:\n\n::: {.cell execution_count=39}\n``` {.julia .cell-code}\nplot(Area, 0, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n![](functions_files/figure-html/cell-40-output-1.svg){}\n:::\n:::\n\n\nFrom the graph, we can see that that width for maximum area is $w=5$ and so $h=5$ as well.\n\n\n## Function application\n\n\nThe typical calling pattern for a function simply follows *mathematical* notation, that is `f(x)` calls the function `f` with the argument `x`. There are times – especially with function composition – that an alternative *piping* syntax is desirable. `Julia` provides the *infix* operation `|>` for piping, defining it by `|>(x, f) = f(x)`. This allows composition to work left to right, instead of right to left. For example, these two calls produce the same answer:\n\n::: {.cell execution_count=40}\n``` {.julia .cell-code}\nexp(sin(log(3))), 3 |> log |> sin |> exp\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n(2.436535228064216, 2.436535228064216)\n```\n:::\n:::\n\n\n## Other types of functions\n\n\n`Julia` has both *generic* functions *and* *anonymous* functions. Generic functions participate in *multiple dispatch*, a central feature of `Julia`. Anonymous functions are very useful with higher-order programming (passing functions as arguments). These notes occasionally take advantage of anonymous functions for convenience.\n\n\n### Anonymous functions\n\n\nSimple mathematical functions have a domain and range which are a subset of the real numbers, and generally have a concrete mathematical rule. However, the definition of a function is much more abstract. We've seen that functions for computer languages can be more complicated too, with, for example, the possibility of multiple input values. Things can get more abstract still.\n\n\nTake for example, the idea of the shift of a function. The following mathematical definition of a new function $g$ related to a function $f$:\n\n\n\n$$\ng(x) = f(x-c)\n$$\n\n\nhas an interpretation - the graph of $g$ will be the same as the graph of $f$ shifted to the right by $c$ units. That is $g$ is a transformation of $f$. From one perspective, the act of replacing $x$ with $x-c$ transforms a function into a new function. Mathematically, when we focus on transforming functions, the word [operator](http://en.wikipedia.org/wiki/Operator_%28mathematics%29) is sometimes used. This concept of transforming a function can be viewed as a certain type of function, in an abstract enough way. The relation would be to just pair off the functions $(f,g)$ where $g(x) = f(x-c)$.\n\n\nWith `Julia` we can represent such operations. The simplest thing would be to do something like:\n\n::: {.cell hold='true' execution_count=41}\n``` {.julia .cell-code}\nf(x) = x^2 - 2x\ng(x) = f(x - 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\ng (generic function with 1 method)\n```\n:::\n:::\n\n\nThen $g$ has the graph of $f$ shifted by 3 units to the right. Now `f` above refers to something in the main workspace, in this example a specific function. Better would be to allow `f` to be an argument of a function, like this:\n\n::: {.cell execution_count=42}\n``` {.julia .cell-code}\nfunction shift_right(f; c=0)\n  function(x)\n    f(x - c)\n  end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\nshift_right (generic function with 1 method)\n```\n:::\n:::\n\n\nThat takes some parsing. In the body of the `shift_right` is the definition of a function. But this function has no name– it is *anonymous*. But what it does should be clear - it subtracts $c$ from $x$ and evaluates $f$ at this new value. Since the last expression creates a function, this function is returned by `shift_right`.\n\n\nSo we could have done something more complicated like:\n\n::: {.cell execution_count=43}\n``` {.julia .cell-code}\nf(x) = x^2 - 2x\nl = shift_right(f, c=3)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n#15 (generic function with 1 method)\n```\n:::\n:::\n\n\nThen `l` is a function that is derived from `f`.\n\n\n:::{.callout-note}\n## Note\nThe value of `c` used when `l` is called is the one passed to `shift_right`. Functions like `l` that are returned by other functions also are called *closures*, as the context they are evaluated within includes the context of the function that constructs them.\n\n:::\n\nAnonymous functions can be created with the `function` keyword, but we will use the \"arrow\" notation, `arg->body` to create them, The above, could have been defined as:\n\n::: {.cell execution_count=44}\n``` {.julia .cell-code}\nshift_right_alt(f; c=0) = x -> f(x-c)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\nshift_right_alt (generic function with 1 method)\n```\n:::\n:::\n\n\nWhen the `->` is seen a function is being created.\n\n\n:::{.callout-warning}\n## Warning\nGeneric versus anonymous functions. Julia has two types of functions, generic ones, as defined by `f(x)=x^2` and anonymous ones, as defined by `x -> x^2`. One gotcha is that `Julia` does not like to use the same variable name for the two types.  In general, Julia is a dynamic language, meaning variable names can be reused with different types of variables. But generic functions take more care, as when a new method is defined it gets added to a method table. So repurposing the name of a generic function for something else is not allowed. Similarly, repurposing an already defined variable name for a generic function is not allowed. This comes up when we use functions that return functions as we have different styles that can be used: When we defined `l = shift_right(f, c=3)` the value of `l` is assigned an anonymous function. This binding can be reused to define other variables. However, we could have defined the function `l` through `l(x) = shift_right(f, c=3)(x)`, being explicit about what happens to the variable `x`. This would add a method to the generic function `l`. Meaning, we get an error if we tried to assign a variable to `l`, such as an expression like `l=3`. We generally employ the latter style, even though it involves a bit more typing, as we tend to stick to methods of generic functions for consistency.\n\n:::\n\n##### Example: the secant line\n\n\nA secant line is a line through two points on the graph of a function. If we have a function $f(x)$, and two $x$-values $x=a$ and $x=b$, then we can find the slope between the points $(a,f(a))$ and $(b, f(b))$ with:\n\n\n\n$$\nm = \\frac{f(b) - f(a)}{b - a}.\n$$\n\n\nThe point-slope form of a line then gives the equation of the tangent line as $y = f(a) + m \\cdot (x - a)$.\n\n\nTo model this in `Julia`, we would want to turn the inputs `f`,`a`, `b` into a function that implements the secant line (functions are much easier to work with than equations). Here is how we can do it:\n\n::: {.cell execution_count=45}\n``` {.julia .cell-code}\nfunction secant(f, a, b)\n   m = (f(b) - f(a)) / (b - a)\n   x -> f(a) + m * (x - a)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\nsecant (generic function with 1 method)\n```\n:::\n:::\n\n\nThe body of the function nearly mirrors the mathematical treatment. The main difference is in place of $y = \\dots$ we have a `x -> ...` to create an anonymous function.\n\n\nTo illustrate the use, suppose $f(x) = x^2 - 2$ and we have the secant line between $a=1$ and $b=2$. The value at $x=3/2$ is given by:\n\n::: {.cell hold='true' execution_count=46}\n``` {.julia .cell-code}\nf(x) = x^2 - 2\na,b = 1, 2\nsecant(f,a,b)(3/2)\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n0.5\n```\n:::\n:::\n\n\nThe last line employs double parentheses. The first pair, `secant(f,a,b)`, returns a function and the second pair, `(3/2)`, are used to call the returned function.\n\n\n#### Closures\n\n\nOne main use of anonymous functions is to make [closures](https://en.wikipedia.org/wiki/Closure_(computer_programming)). We've touched on two  concepts: functions with parameters *and* functions as arguments to other functions. The creation of a function for a given set of parameters may be needed. Anonymous functions are used to create **closures** which capture the values of the parameters. For a simple example, `mxplusb` parameterizes any line, but to use a function to represent a specific line, a new function can be created:\n\n::: {.cell hold='true' execution_count=47}\n``` {.julia .cell-code}\nmxplusb(x; m=0, b=0) = m*x + b\nspecific_line(m,b) = x -> mxplusb(x; m=m, b=b)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\nspecific_line (generic function with 1 method)\n```\n:::\n:::\n\n\nThe returned object will have its parameters (`m` and `b`) fixed when used.\n\n\nIn `Julia`, the functions `Base.Fix1` and `Base.Fix2` are provided to take functions of two variables and create callable objects of just one variable, with the other argument fixed. This partial function application is provided by a some of the logical comparison operators, which can be useful with filtering, say.\n\n\nFor example, `<(2)` is a funny looking way of expressing the function `x -> x < 2`. (Think of `x < y` as `<(x,y)` and then \"fix\" the value of `y` to be `2`.) This is useful with filtering by a predicate function, for example:\n\n::: {.cell execution_count=48}\n``` {.julia .cell-code}\nfilter(<(2), 0:4)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n2-element Vector{Int64}:\n 0\n 1\n```\n:::\n:::\n\n\nwhich picks off the values of `0` and `1` in a somewhat obscure way but less verbose than `filter(x -> x < 2, 0:4)`.\n\n\nThe `Fix2` function is also helpful when using the `f(x, p)` form for passing parameters to a function. The result of `Base.Fix2(f, p)` is a function with its parameters fixed that can be passed along for plotting or other uses.\n\n\n### The `do` notation\n\n\nMany functions in `Julia` accept a function as the first argument. A common pattern for calling some function is `action(f, args...)` where `action` is the function that will act on another function `f` using the value(s) in `args...`. There `do` notation is syntactical sugar for creating an anonymous function which is useful when more complicated function bodies are needed.\n\n\nHere is an artificial example to illustrate of a task we won't have cause to use in these notes, but is an important skill in some contexts. The `do` notation can be confusing to read, as it moves the function definition to the end and not the beginning, but is convenient to write and is used very often with the task of this example.\n\n\nTo save some text to a file requires a few steps: opening the file; writing to the file; closing the file. The `open` function does the first. One method has this signature `open(f::Function, args...; kwargs....)` and is documented to \"Apply the function f to the result of `open(args...; kwargs...)` and close the   resulting file descriptor upon completion.\" Which is great, the open and close stages are handled by `Julia` and only the writing is up to the user.\n\n\nThe writing is done in the function of a body, so the `do` notation allows the creation of the function to be handled anonymously. In this context, the argument to this function will be an `IO` handle, which is typically called `io`.\n\n\nSo the pattern would be\n\n``` {.julia .cell-code}\nopen(\"somefile.txt\", \"w\") do io\n    write(io, \"Four score and seven\")\n    write(io, \"years ago...\")\nend\n```\n\n\nThe name of the file to open appears, how the file is to be opened (`w` means write, `r` would mean read), and then a function with argument `io` which writes two lines to `io`.\n\n\n## Questions\n\n\n##### Question\n\n\nState the domain and range of $f(x) = |x + 2|$.\n\n::: {.cell hold='true' execution_count=50}\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='12668565747201620807' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_12668565747201620807\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12668565747201620807_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12668565747201620807\"\n              id=\"radio_12668565747201620807_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Domain is all non-negative numbers, range is all non-negative numbers\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12668565747201620807_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12668565747201620807\"\n              id=\"radio_12668565747201620807_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Domain is all non-negative numbers, range is all real numbers\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12668565747201620807_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12668565747201620807\"\n              id=\"radio_12668565747201620807_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Domain is all real numbers, range is all non-negative numbers\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12668565747201620807_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12668565747201620807\"\n              id=\"radio_12668565747201620807_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Domain is all real numbers, range is all real numbers\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='12668565747201620807_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_12668565747201620807\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('12668565747201620807_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_12668565747201620807\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_12668565747201620807\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n##### Question\n\n\nState the domain and range of $f(x) = 1/(x-2)$.\n\n::: {.cell hold='true' execution_count=51}\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16524592582380557133' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16524592582380557133\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16524592582380557133_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16524592582380557133\"\n              id=\"radio_16524592582380557133_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Domain is all non-negative numbers except \\(-2\\), range is all non-negative numbers except \\(0\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16524592582380557133_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16524592582380557133\"\n              id=\"radio_16524592582380557133_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Domain is all real numbers, range is all real numbers\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16524592582380557133_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16524592582380557133\"\n              id=\"radio_16524592582380557133_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Domain is all real numbers except \\(2\\), range is all real numbers except \\(0\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16524592582380557133_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16524592582380557133\"\n              id=\"radio_16524592582380557133_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Domain is all non-negative numbers except \\(0\\), range is all real numbers except \\(2\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16524592582380557133_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_16524592582380557133\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('16524592582380557133_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16524592582380557133\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16524592582380557133\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n##### Question\n\n\nWhich of these functions has a domain of all real $x$, but a range of $x > 0$?\n\n::: {.cell hold='true' execution_count=52}\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='12440313303050539026' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_12440313303050539026\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12440313303050539026_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12440313303050539026\"\n              id=\"radio_12440313303050539026_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(f(x) = 2^x\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12440313303050539026_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12440313303050539026\"\n              id=\"radio_12440313303050539026_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(f(x) = |x|\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12440313303050539026_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12440313303050539026\"\n              id=\"radio_12440313303050539026_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(f(x) = \\sqrt{x}\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12440313303050539026_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12440313303050539026\"\n              id=\"radio_12440313303050539026_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(f(x) = 1/x^2\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='12440313303050539026_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_12440313303050539026\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('12440313303050539026_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_12440313303050539026\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_12440313303050539026\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nWhich of these commands will make a function for $f(x) = \\sin(x + \\pi/3)$?\n\n::: {.cell hold='true' execution_count=53}\n\n::: {.cell-output .cell-output-display execution_count=51}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='5955489653689775946' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_5955489653689775946\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5955489653689775946_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5955489653689775946\"\n              id=\"radio_5955489653689775946_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>function f&#40;x&#41; &#61; sin&#40;x &#43; pi/3&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5955489653689775946_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5955489653689775946\"\n              id=\"radio_5955489653689775946_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f: x -&gt; sin&#40;x &#43; pi/3&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5955489653689775946_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5955489653689775946\"\n              id=\"radio_5955489653689775946_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f &#61; sin&#40;x &#43; pi/3&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5955489653689775946_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5955489653689775946\"\n              id=\"radio_5955489653689775946_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41;  &#61; sin&#40;x &#43; pi/3&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5955489653689775946_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5955489653689775946\"\n              id=\"radio_5955489653689775946_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f x &#61; sin&#40;x &#43; pi/3&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='5955489653689775946_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_5955489653689775946\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('5955489653689775946_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_5955489653689775946\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_5955489653689775946\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nWhich of these commands will create a function for $f(x) = (1 + x^2)^{-1}$?\n\n::: {.cell hold='true' execution_count=54}\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='14658183995534951063' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_14658183995534951063\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14658183995534951063_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14658183995534951063\"\n              id=\"radio_14658183995534951063_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; &#40;1 &#43; x^2&#41;^&#40;-1&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14658183995534951063_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14658183995534951063\"\n              id=\"radio_14658183995534951063_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; :&#61; &#40;1 &#43; x^2&#41;^&#40;-1&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14658183995534951063_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14658183995534951063\"\n              id=\"radio_14658183995534951063_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>function f&#40;x&#41; &#61; &#40;1 &#43; x^2&#41;^&#40;-1&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14658183995534951063_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14658183995534951063\"\n              id=\"radio_14658183995534951063_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#91;x&#93; &#61;  &#40;1 &#43; x^2&#41;^&#40;-1&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14658183995534951063_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14658183995534951063\"\n              id=\"radio_14658183995534951063_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>def f&#40;x&#41;: &#40;1 &#43; x^2&#41;^&#40;-1&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='14658183995534951063_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_14658183995534951063\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('14658183995534951063_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_14658183995534951063\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_14658183995534951063\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nWill the following `Julia` commands create a function for\n\n\n\n$$\nf(x) = \\begin{cases}\n30 & x < 500\\\\\n30 + 0.10 \\cdot (x-500) & \\text{otherwise.}\n\\end{cases}\n$$\n\n``` {.julia .cell-code}\nphone_plan(x) = x < 500 ? 30.0 : 30 + 0.10 * (x-500);\n```\n\n\n::: {.cell hold='true' execution_count=56}\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='2462636148953687779' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_2462636148953687779\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2462636148953687779_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2462636148953687779\"\n              id=\"radio_2462636148953687779_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2462636148953687779_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2462636148953687779\"\n              id=\"radio_2462636148953687779_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='2462636148953687779_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_2462636148953687779\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('2462636148953687779_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_2462636148953687779\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_2462636148953687779\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe expression `max(0, x)` will be `0` if `x` is negative, but otherwise will take the value of `x`. Is this the same?\n\n``` {.julia .cell-code}\na_max(x) = x < 0 ? x : 0.0;\n```\n\n\n::: {.cell hold='true' execution_count=58}\n\n::: {.cell-output .cell-output-display execution_count=56}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3919381930111170999' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3919381930111170999\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3919381930111170999_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3919381930111170999\"\n              id=\"radio_3919381930111170999_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3919381930111170999_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3919381930111170999\"\n              id=\"radio_3919381930111170999_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3919381930111170999_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_3919381930111170999\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('3919381930111170999_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3919381930111170999\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3919381930111170999\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nIn statistics, the normal distribution has two parameters $\\mu$ and $\\sigma$ appearing as:\n\n\n\n$$\nf(x; \\mu, \\sigma) = \\frac{1}{\\sqrt{2\\pi\\sigma}} e^{-\\frac{1}{2}\\frac{(x-\\mu)^2}{\\sigma}}.\n$$\n\n\nDoes this function implement this with the default values of $\\mu=0$ and $\\sigma=1$?\n\n::: {.cell execution_count=59}\n``` {.julia .cell-code}\na_normal(x; mu=0, sigma=1) = 1/sqrt(2pi*sigma) * exp(-(1/2)*(x-mu)^2/sigma)\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\na_normal (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell hold='true' execution_count=60}\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='13222323203047353758' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_13222323203047353758\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_13222323203047353758_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_13222323203047353758\"\n              id=\"radio_13222323203047353758_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_13222323203047353758_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_13222323203047353758\"\n              id=\"radio_13222323203047353758_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='13222323203047353758_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_13222323203047353758\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('13222323203047353758_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_13222323203047353758\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_13222323203047353758\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nWhat value of $\\mu$ is used if the function is called as `f(x, sigma=2.7)`?\n\n::: {.cell hold='true' execution_count=61}\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11609662168580684982' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11609662168580684982\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"11609662168580684982\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11609662168580684982_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"11609662168580684982\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 0) <= 0);\n  var msgBox = document.getElementById('11609662168580684982_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11609662168580684982\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11609662168580684982\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\nWhat value of $\\mu$ is used if the function is called as `f(x, mu=70)`?\n\n::: {.cell hold='true' execution_count=62}\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17408921585369443052' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17408921585369443052\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"17408921585369443052\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17408921585369443052_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"17408921585369443052\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 70) <= 0);\n  var msgBox = document.getElementById('17408921585369443052_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17408921585369443052\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17408921585369443052\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\nWhat value of $\\mu$ is used if the function is called as `f(x, mu=70, sigma=2.7)`?\n\n::: {.cell hold='true' execution_count=63}\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17230514225174312932' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17230514225174312932\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"17230514225174312932\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17230514225174312932_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"17230514225174312932\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 70) <= 0);\n  var msgBox = document.getElementById('17230514225174312932_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17230514225174312932\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17230514225174312932\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\n`Julia` has keyword arguments (as just illustrated) but also positional arguments. These are matched by how the function is called. For example,\n\n::: {.cell execution_count=64}\n``` {.julia .cell-code}\nA(w, h) = w * h\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\nA (generic function with 1 method)\n```\n:::\n:::\n\n\nwhen called as `A(10, 5)` will use 10 for `w` and `5` for `h`, as the order of `w` and `h` matches that of `10` and `5` in the call.\n\n\nThis is clear enough, but in fact positional arguments can have default values (then called [optional](https://docs.julialang.org/en/v1/manual/functions/#Optional-Arguments)) arguments). For example,\n\n::: {.cell execution_count=65}\n``` {.julia .cell-code}\nB(w, h=5) = w * h\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\nB (generic function with 2 methods)\n```\n:::\n:::\n\n\nActually creates two functions: `B(w,h)` for when the call is, say, `B(10,5)` and `B(w)` when the call is `B(10)`.\n\n\nSuppose a function `C` is defined by\n\n::: {.cell execution_count=66}\n``` {.julia .cell-code}\nC(x, mu=0, sigma=1) = 1/sqrt(2pi*sigma) * exp(-(1/2)*(x-mu)^2/sigma)\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\nC (generic function with 3 methods)\n```\n:::\n:::\n\n\nThis is *nearly* identical to the last question, save for a comma instead of a semicolon after the `x`.\n\n\nWhat value of `mu` is used by the call `C(1, 70, 2.7)`?\n\n::: {.cell hold='true' execution_count=67}\n\n::: {.cell-output .cell-output-display execution_count=65}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='10934044254157698298' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_10934044254157698298\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"10934044254157698298\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='10934044254157698298_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"10934044254157698298\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 70) <= 0);\n  var msgBox = document.getElementById('10934044254157698298_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_10934044254157698298\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_10934044254157698298\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\nWhat value of `mu` is used by the call `C(1, 70)`?\n\n::: {.cell hold='true' execution_count=68}\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3354960880885820183' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3354960880885820183\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"3354960880885820183\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3354960880885820183_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"3354960880885820183\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 70) <= 0);\n  var msgBox = document.getElementById('3354960880885820183_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3354960880885820183\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3354960880885820183\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\nWhat value of `mu` is used by the call `C(1)`?\n\n::: {.cell hold='true' execution_count=69}\n\n::: {.cell-output .cell-output-display execution_count=67}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='1828899049840728527' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_1828899049840728527\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"1828899049840728527\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='1828899049840728527_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"1828899049840728527\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 0) <= 0);\n  var msgBox = document.getElementById('1828899049840728527_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_1828899049840728527\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_1828899049840728527\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\nWill the call `C(1, mu=70)` use a value of `70` for `mu`?\n\n::: {.cell hold='true' execution_count=70}\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='418529363946669211' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_418529363946669211\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_418529363946669211_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_418529363946669211\"\n              id=\"radio_418529363946669211_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes, this will work just as it does for keyword arguments\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_418529363946669211_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_418529363946669211\"\n              id=\"radio_418529363946669211_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No, there will be an error that the function does not accept keyword arguments\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='418529363946669211_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_418529363946669211\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('418529363946669211_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_418529363946669211\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_418529363946669211\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThis function mirrors that of the built-in `clamp` function:\n\n::: {.cell execution_count=71}\n``` {.julia .cell-code}\nklamp(x, a, b) = x < a ? a : (x > b ? b : x)\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\nklamp (generic function with 1 method)\n```\n:::\n:::\n\n\nCan you tell what it does?\n\n::: {.cell hold='true' execution_count=72}\n\n::: {.cell-output .cell-output-display execution_count=70}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='9634411097886022597' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_9634411097886022597\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9634411097886022597_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9634411097886022597\"\n              id=\"radio_9634411097886022597_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        If <code>x</code> is in <code>&#91;a,b&#93;</code> it returns <code>x</code>, otherwise it returns <code>NaN</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9634411097886022597_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9634411097886022597\"\n              id=\"radio_9634411097886022597_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>x</code> is the larger of the minimum of <code>x</code> and <code>a</code> and the value of <code>b</code>, aka <code>max&#40;min&#40;x,a&#41;,b&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9634411097886022597_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9634411097886022597\"\n              id=\"radio_9634411097886022597_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        If <code>x</code> is in <code>&#91;a,b&#93;</code> it returns <code>x</code>, otherwise it returns <code>a</code> when <code>x</code> is less than <code>a</code> and <code>b</code> when  <code>x</code> is greater than <code>b</code>.\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='9634411097886022597_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_9634411097886022597\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('9634411097886022597_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_9634411097886022597\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_9634411097886022597\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\n`Julia` has syntax for the composition of  functions $f$ and $g$ using the Unicode operator `∘` entered as `\\circ[tab]`.\n\n\nThe notation to call a composition follows the math notation, where parentheses are necessary to separate the act of composition from the act of calling the function:\n\n\n\n$$\n(f \\circ g)(x)\n$$\n\n\nFor example\n\n::: {.cell execution_count=73}\n``` {.julia .cell-code}\n(sin ∘ cos)(pi/4)\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\n0.6496369390800625\n```\n:::\n:::\n\n\nWhat happens if you forget the extra parentheses and were to call `sin ∘ cos(pi/4)`?\n\n::: {.cell hold='true' execution_count=74}\n\n::: {.cell-output .cell-output-display execution_count=72}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='5042459291864724746' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_5042459291864724746\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5042459291864724746_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5042459291864724746\"\n              id=\"radio_5042459291864724746_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        You still get \\(0.649...\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5042459291864724746_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5042459291864724746\"\n              id=\"radio_5042459291864724746_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        You get a <code>MethodError</code>, as <code>cos&#40;pi/4&#41;</code> is evaluated as a number and <code>∘</code> is not defined for functions and numbers\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5042459291864724746_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5042459291864724746\"\n              id=\"radio_5042459291864724746_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        You get a <code>generic</code> function, but this won&#39;t be callable. If tried, it will give an method error.\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='5042459291864724746_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_5042459291864724746\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('5042459291864724746_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_5042459291864724746\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_5042459291864724746\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::{.callout-note}\n## Note\nThe parentheses in `(sin ∘ cos)(pi/4)` are needed due to the order of operations, with `cos(pi/4)` being evaluated first in the expression `sin ∘ cos(pi/4)`. Alternatively, one can define a function `sc = sin ∘ cos` (without parentheses), then call it through `sc(pi/4)`.\n:::\n\n###### Question\n\n\nThe [pipe](https://docs.julialang.org/en/v1/manual/functions/#Function-composition-and-piping) notation `ex |> f` takes the output of `ex` and uses it as the input to the function `f`. That is composition. What is the value of this expression `1 |> sin |> cos`?\n\n::: {.cell hold='true' execution_count=75}\n\n::: {.cell-output .cell-output-display execution_count=73}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='4107679348041679853' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_4107679348041679853\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4107679348041679853_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4107679348041679853\"\n              id=\"radio_4107679348041679853_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It is <code>0.6663667453928805</code>, the same as <code>cos&#40;sin&#40;1&#41;&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4107679348041679853_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4107679348041679853\"\n              id=\"radio_4107679348041679853_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It is <code>0.5143952585235492</code>, the same as <code>sin&#40;cos&#40;1&#41;&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4107679348041679853_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4107679348041679853\"\n              id=\"radio_4107679348041679853_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It gives an error\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='4107679348041679853_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_4107679348041679853\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('4107679348041679853_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_4107679348041679853\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_4107679348041679853\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\n`Julia` has implemented this *limited* set of algebraic operations on functions: `∘` for *composition* and `!` for *negation*. (Read `!` as \"not.\") The latter is useful for \"predicate\" functions (ones that return either `true` or `false`. What is output by this command?\n\n``` {.julia .cell-code}\nfn = !iseven\nfn(3)\n```\n\n\n::: {.cell hold='true' execution_count=77}\n\n::: {.cell-output .cell-output-display execution_count=74}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17979734292094688924' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17979734292094688924\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17979734292094688924_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17979734292094688924\"\n              id=\"radio_17979734292094688924_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>false</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17979734292094688924_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17979734292094688924\"\n              id=\"radio_17979734292094688924_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>true</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17979734292094688924_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_17979734292094688924\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('17979734292094688924_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17979734292094688924\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17979734292094688924\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nGeneric functions in `Julia` allow many algorithms to work without change for different number types. For example, [3000](https://pdfs.semanticscholar.org/1ef4/ee58a159dc7e437e190ec2839fb9a654596c.pdf) years ago, floating point numbers wouldn't have been used to carry out the secant method computations, rather rational numbers would have been. We can see the results of using rational numbers with no change to our key function, just by starting with rational numbers for `a` and `b`:\n\n::: {.cell hold='true' execution_count=78}\n``` {.julia .cell-code}\nsecant_intersection(f, a, b) = b - f(b) * (b - a) / (f(b) - f(a))  # rewritten\nf(x) = x^2 - 2\na, b = 1//1, 2//1\nc = secant_intersection(f, a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```\n4//3\n```\n:::\n:::\n\n\nNow `c` is `4//3` and not `1.333...`. This works as the key operations used: division, squaring, subtraction all have different implementations for rational numbers that preserve this type.\n\n\nRepeat the secant method two more times to find a better approximation for $\\sqrt{2}$. What is the value of `c` found?\n\n::: {.cell hold='true' execution_count=79}\n\n::: {.cell-output .cell-output-display execution_count=76}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7710370954192974770' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7710370954192974770\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7710370954192974770_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7710370954192974770\"\n              id=\"radio_7710370954192974770_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>4//3</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7710370954192974770_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7710370954192974770\"\n              id=\"radio_7710370954192974770_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>7//5</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7710370954192974770_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7710370954192974770\"\n              id=\"radio_7710370954192974770_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>58//41</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7710370954192974770_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7710370954192974770\"\n              id=\"radio_7710370954192974770_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>816//577</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='7710370954192974770_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_7710370954192974770\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('7710370954192974770_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7710370954192974770\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7710370954192974770\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nHow small is the value of $f(c)$ for this value?\n\n::: {.cell hold='true' execution_count=80}\n\n::: {.cell-output .cell-output-display execution_count=77}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='12419916320706832906' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_12419916320706832906\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"12419916320706832906\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='12419916320706832906_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"12419916320706832906\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 0.0011897679952408424) <= 0.001);\n  var msgBox = document.getElementById('12419916320706832906_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_12419916320706832906\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_12419916320706832906\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\nHow close is this answer to the true value of $\\sqrt{2}$?\n\n::: {.cell hold='true' execution_count=81}\n\n::: {.cell-output .cell-output-display execution_count=78}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='9753675748118771785' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_9753675748118771785\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9753675748118771785_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9753675748118771785\"\n              id=\"radio_9753675748118771785_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        about \\(8\\) parts in \\(100\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9753675748118771785_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9753675748118771785\"\n              id=\"radio_9753675748118771785_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        about \\(1\\) parts in \\(100\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9753675748118771785_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9753675748118771785\"\n              id=\"radio_9753675748118771785_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        about \\(4\\) parts in \\(10,000\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9753675748118771785_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9753675748118771785\"\n              id=\"radio_9753675748118771785_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        about \\(2\\) parts in \\(1,000,000\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='9753675748118771785_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_9753675748118771785\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('9753675748118771785_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_9753675748118771785\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_9753675748118771785\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n(Finding a good approximation to $\\sqrt{2}$ would be helpful to builders, for example, as it could be used to verify the trueness of a square room, say.)\n\n\n###### Question\n\n\n`Julia` does not have surface syntax for the *difference* of functions. This is a common thing to want when solving equations. The tools available solve $f(x)=0$, but problems may present as solving for $h(x) = g(x)$ or even $h(x) = c$, for some constant. Which of these solutions is **not** helpful if $h$ and $g$ are already defined?\n\n::: {.cell hold='true' execution_count=82}\n\n::: {.cell-output .cell-output-display execution_count=79}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='18426826833105642071' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_18426826833105642071\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_18426826833105642071_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_18426826833105642071\"\n              id=\"radio_18426826833105642071_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Define <code>f&#40;x&#41; &#61; h&#40;x&#41; - g&#40;x&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_18426826833105642071_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_18426826833105642071\"\n              id=\"radio_18426826833105642071_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Use <code>x -&gt; h&#40;x&#41; - g&#40;x&#41;</code> when the difference is needed\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_18426826833105642071_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_18426826833105642071\"\n              id=\"radio_18426826833105642071_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Just use <code>f &#61; h - g</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='18426826833105642071_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_18426826833105642071\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('18426826833105642071_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_18426826833105642071\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_18426826833105642071\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nIdentifying the range of a function can be a difficult task. We see in this question that in some cases, a package can be of assistance.\n\n\nA mathematical interval is a set of values of the form\n\n\n  * an open interval: $a < x < b$, or $(a,b)$;\n  * a closed interval: $a \\leq x \\leq b$, or $[a,b]$;\n  * or a half-open interval: $a < x \\leq b$ or $a \\leq x < b$, repectively $(a,b]$ or $[a,b)$.\n\n\nThey all contain all real numbers between the endpoints, the distinction is whether the endpoints are included or not.\n\n\nA domain is some set, but typically that set is an interval such as *all real numbers* ($(-\\infty,\\infty)$), *all non-negative numbers* ($[0,\\infty)$), or, say, *all positive numbers* ($(0,\\infty)$).\n\n\nThe `IntervalArithmetic` package provides an easy  means to define closed intervals using the symbol `..`, but this is also used by the already loaded `CalculusWithJulia` package in different manner, so we use the fully qualified named constructor in the following to construct intervals:\n\n``` {.julia .cell-code}\nimport IntervalArithmetic\n```\n\n\n::: {.cell execution_count=84}\n``` {.julia .cell-code}\nI1 = IntervalArithmetic.Interval(-Inf, Inf)\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\n[-∞, ∞]\n```\n:::\n:::\n\n\n::: {.cell execution_count=85}\n``` {.julia .cell-code}\nI2 = IntervalArithmetic.Interval(0, Inf)\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\n[0, ∞]\n```\n:::\n:::\n\n\nThe main feature of the package is not to construct intervals, but rather to *rigorously* bound with an interval the output of the image of a closed interval under a function. That is, for a function $f$ and *closed* interval $[a,b]$, a bound for the set $\\{f(x) \\text{ for } x \\text{ in } [a,b]\\}$. When `[a,b]` is the domain of $f$, then this is a bound for the range of $f$.\n\n\nFor example the function $f(x) = x^2 + 2$ had a domain of all real $x$, the range can be found with:\n\n::: {.cell execution_count=86}\n``` {.julia .cell-code}\nab = IntervalArithmetic.Interval(-Inf, Inf)\nu(x) = x^2 + 2\nu(ab)\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\n[2, ∞]\n```\n:::\n:::\n\n\nFor this problem, the actual range can easily be identified. Does the bound computed match exactly?\n\n::: {.cell hold='true' execution_count=87}\n\n::: {.cell-output .cell-output-display execution_count=84}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='15694083360978970428' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_15694083360978970428\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15694083360978970428_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15694083360978970428\"\n              id=\"radio_15694083360978970428_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15694083360978970428_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15694083360978970428\"\n              id=\"radio_15694083360978970428_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='15694083360978970428_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_15694083360978970428\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('15694083360978970428_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_15694083360978970428\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_15694083360978970428\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nDoes `sin(0..pi)` **exactly** match the interval of $[-1,1]$?\n\n::: {.cell hold='true' execution_count=88}\n\n::: {.cell-output .cell-output-display execution_count=85}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='12796847254243267753' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_12796847254243267753\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12796847254243267753_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12796847254243267753\"\n              id=\"radio_12796847254243267753_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12796847254243267753_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12796847254243267753\"\n              id=\"radio_12796847254243267753_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='12796847254243267753_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_12796847254243267753\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('12796847254243267753_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_12796847254243267753\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_12796847254243267753\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nGuess why or why not?\n\n::: {.cell hold='true' execution_count=89}\n\n::: {.cell-output .cell-output-display execution_count=86}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='9786052731680290586' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_9786052731680290586\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9786052731680290586_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9786052731680290586\"\n              id=\"radio_9786052731680290586_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Well it does, because \\([-1,1]\\) is the range\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9786052731680290586_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9786052731680290586\"\n              id=\"radio_9786052731680290586_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It does not. The bound found is a provably known bound. The small deviation is due to the possible errors in evalution of the <code>sin</code> function near the floating point approximation of <code>pi</code>,\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='9786052731680290586_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_9786052731680290586\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('9786052731680290586_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_9786052731680290586\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_9786052731680290586\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nNow consider the evaluation\n\n::: {.cell hold='true' execution_count=90}\n``` {.julia .cell-code}\nf(x) = x^x\nI = IntervalArithmetic.Interval(0, Inf)\nf(I)\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```\n[0, ∞]\n```\n:::\n:::\n\n\nMake a graph of `f`. Does the interval found above provide a nearly exact estimate of the true range (as the previous two questions have)?\n\n::: {.cell hold='true' execution_count=91}\n\n::: {.cell-output .cell-output-display execution_count=88}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='723597330608093923' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_723597330608093923\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_723597330608093923_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_723597330608093923\"\n              id=\"radio_723597330608093923_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_723597330608093923_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_723597330608093923\"\n              id=\"radio_723597330608093923_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='723597330608093923_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_723597330608093923\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('723597330608093923_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_723597330608093923\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_723597330608093923\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nAny thoughts on why?\n\n::: {.cell hold='true' execution_count=92}\n\n::: {.cell-output .cell-output-display execution_count=89}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='15819718861372293484' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_15819718861372293484\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15819718861372293484_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15819718861372293484\"\n              id=\"radio_15819718861372293484_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The interval is a nearly exact estimate, as guaranteed by <code>IntervalArithmetic</code>.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15819718861372293484_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15819718861372293484\"\n              id=\"radio_15819718861372293484_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The guarantee of <code>IntervalArithmetic</code> is a <em>bound</em> on the interval, not the <em>exact</em> interval. In the case where the variable <code>x</code> appears more than once, it is treated formulaically as an <em>independent</em> quantity &#40;meaning it has it full set of values considered in each instance&#41; which is not the actual case mathematically. This is the &quot;dependence problem&quot; in interval arithmetic.\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='15819718861372293484_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_15819718861372293484\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('15819718861372293484_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_15819718861372293484\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_15819718861372293484\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "functions_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}