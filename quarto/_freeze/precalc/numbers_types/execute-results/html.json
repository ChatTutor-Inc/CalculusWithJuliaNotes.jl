{
  "hash": "995e9ea1cb7ad42f6e9cb0e1f108eb7c",
  "result": {
    "markdown": "# Number systems\n\n\n\n\n\nIn mathematics, there are many different number systems in common use. For example by the end of pre-calculus, all of the following have been introduced:\n\n\n  * The integers, $\\{\\dots, -3, -2, -1, 0, 1, 2, 3, \\dots\\}$;\n  * The rational numbers, $\\{p/q: p, q  \\text{ are integers}, q \\neq 0\\}$;\n  * The real numbers, $\\{x: -\\infty < x < \\infty\\}$;\n  * The complex numbers, $\\{a + bi: a,b \\text{ are real numbers and } i^2=-1\\}$.\n\n\nOn top of these, we have special subsets, such as the natural numbers $\\{1, 2, \\dots\\}$ (sometimes including $0$), the even numbers, the odd numbers, the positive numbers, the non-negative numbers, etc.\n\n\nMathematically, these number systems are naturally nested within each other as integers are rational numbers which are real numbers, which can be viewed as part of the complex numbers.\n\n\nCalculators typically have just one type of number - floating point values. These model the real numbers. `Julia`, on other other hand, has a rich type system, and within that has many different number types. There are types that model each of the four main systems above, and within each type, specializations for how these values are stored.\n\n\nMost of the details will not be of interest to all, and will be described later.\n\n\nFor now, let's consider the number $1$. It can be viewed as either an integer, rational, real, or complex number. To construct \"$1$\" in each type within `Julia` we have these different styles:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n1, 1.0, 1//1, 1 + 0im\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n(1, 1.0, 1//1, 1 + 0im)\n```\n:::\n:::\n\n\nThe basic number types in `Julia` are `Int`, `Float64`, `Rational` and `Complex`, though in fact there are many more, and the last two aren't even *concrete* types. This distinction is important, as the type of number dictates how it will be stored and how precisely the stored value can be expected to be  to the mathematical value it models.\n\n\nThough there are explicit constructors for these types, these notes avoid them unless necessary, as `Julia`'s parser can distinguish these types through an easy to understand syntax:\n\n\n  * integers have no decimal point;\n  * floating point numbers have a decimal point (or are in scientific notation);\n  * rationals are constructed from integers using the double division operator, `//`; and\n  * complex numbers are formed by including a term with the imaginary unit, `im`.\n\n\n:::{.callout-note}\n## Warning\nHeads up, the difference between `1` and `1.0` is subtle. Even more so, as `1.` will parse as `1.0`. This means some expressions, such as `2.*3`, are ambiguous, as the `.` might be part of the `2` (as in `2. * 3`) or the operation `*` (as in `2 .* 3`).\n\n:::\n\nSimilarly, each type is printed slightly differently.\n\n\nThe key distinction is between integers and floating points. While floating point values include integers, and so can be used exclusively on the calculator, the difference is that an integer is guaranteed to be an exact value, whereas a floating point value, while often an exact representation of a number is also often just an *approximate* value. This can be an advantage – floating point values can model a much wider range of numbers.\n\n\nNow in nearly all cases the differences are not noticeable. Take for instance this simple calculation involving mixed types.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n1 + 1.25 + 3//2\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n3.75\n```\n:::\n:::\n\n\nThe sum of an integer, a floating point number and rational number returns a floating point number without a complaint.\n\n\nThis is  because behind the scenes, `Julia` will often \"promote\" a type to match, so for example to compute `1 + 1.25` the integer `1` will be promoted to a floating point value and the two values are then added. Similarly, with `2.25 + 3//2`, where the fraction is promoted to the floating point value `1.5` and addition is carried out.\n\n\nAs floating point numbers may be  approximations, some values are not quite what they would be mathematically:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nsqrt(2) * sqrt(2) - 2, sin(pi), 1/10 + 1/5 - 3/10\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n(4.440892098500626e-16, 1.2246467991473532e-16, 5.551115123125783e-17)\n```\n:::\n:::\n\n\nThese values are *very* small numbers, but not exactly $0$, as they are mathematically.\n\n---\n\n\nThe only  common issue is with powers. `Julia` tries to keep a predictable output from the input types (not their values). Here are the two main cases that arise where this can cause unexpected results:\n\n\n  * integer bases and integer exponents can *easily* overflow. Not only `m^n` is always an integer, it is always an integer with a fixed storage size computed from the sizes of `m` and `n`. So the powers can quickly get too big. This can be especially noticeable on older $32$-bit machines, where too big is $2^{32} = 4,294,967,296$. On $64$-bit machines, this limit is present but much bigger.\n\n\nRather than give an error though, `Julia` gives seemingly arbitrary answers, as can be seen in this example on a $64$-bit machine:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n2^62, 2^63\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n(4611686018427387904, -9223372036854775808)\n```\n:::\n:::\n\n\n(They aren't arbitrary, rather integer arithmetic is implemented as modular arithmetic.)\n\n\nThis could be worked around, as it is with some programming languages, but it isn't, as it would slow down this basic computation. So, it is up to the user to be aware of cases where their integer values can grow to big. The suggestion is to use floating point numbers in this domain, as they have more room, at the cost of sometimes being approximate values.\n\n\n  * the `sqrt` function will give a domain error for negative values:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nsqrt(-1.0)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: DomainError with -1.0:\nsqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n```\n:::\n:::\n\n\nThis is because for real-valued inputs `Julia` expects to return a real-valued output. Of course, this is true in mathematics until the complex numbers are introduced. Similarly in `Julia` - to take square roots of negative numbers, start with complex numbers:\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nsqrt(-1.0 + 0im)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n0.0 + 1.0im\n```\n:::\n:::\n\n\n  * At one point, `Julia` had an issue with a third type of power:\n\n\ninteger bases and negative integer exponents. For example `2^(-1)`. This is now special cased, though only for numeric literals. If `z=-1`, `2^z` will throw a `DomainError`.  Historically, the desire to keep a predictable type for the output (integer) led to defining this case as a domain error, but its usefulness led to special casing.\n\n\n## Additional details.\n\n\nWhat follows is only needed for those seeking more background.\n\n\nJulia has *abstract* number types `Integer`, `Real`, and `Number`. All four types described above are of type `Number`, but `Complex` is not of type `Real`.\n\n\nHowever, a specific value is an instance of a *concrete* type. A concrete type will also include information about how the value is stored. For example, the *integer* `1` could be stored using $64$ bits as a signed integers, or, should storage be a concern, as an $8$ bits signed or even unsigned integer, etc.. If storage isn't an issue, but exactness at all scales is, then it can be stored in a manner that allows for the storage to grow using \"big\" numbers.\n\n\nThese distinctions can be seen in how `Julia` parses these three values:\n\n\n  * `1234567890` will be a $64$-bit integer (on newer machines), `Int64`\n  * `12345678901234567890` will be a $128$ bit integer, `Int128`\n  * `1234567890123456789012345678901234567890` will be a big integer, `BigInt`\n\n\nHaving abstract types allows programmers to write functions that will work over a wide range of input values that are similar, but have different implementation details.\n\n\n### Integers\n\n\nIntegers are often used casually, as they come about from parsing. As with a calculator, floating point numbers *could* be used for integers, but in `Julia` - and other languages - it proves useful to have numbers known to have *exact* values. In `Julia` there are built-in number types for integers stored in $8$, $16$, $32$, $64$, and $128$ bits and `BigInt`s if the previous aren't large enough. ($8$ bits can hold $8$ binary values representing $1$ of $256=2^8$ possibilities, whereas the larger $128$ bit can hold one of $2^{128}$ possibilities.) Smaller values can be more efficiently used, and this is leveraged at the system level, but not a necessary distinction with calculus where the default size along with an occasional usage of `BigInt` suffice.\n\n\n### Floating point numbers\n\n\n[Floating point](http://en.wikipedia.org/wiki/Floating_point) numbers are a computational model for the real numbers.  For floating point numbers, $64$ bits are used by default for both $32$- and $64$-bit systems, though other storage sizes can be requested. This gives a large ranging - but still finite - set of real numbers that can be represented. However, there are infinitely many real numbers just between $0$ and $1$, so there is no chance that all can be represented exactly on the computer with a floating point value. Floating point then is *necessarily* an approximation for all but a subset of the real numbers. Floating point values can be viewed in normalized [scientific notation](http://en.wikipedia.org/wiki/Scientific_notation) as $a\\cdot 2^b$ where $a$ is the *significand* and $b$ is the *exponent*. Save for special values, the significand $a$ is normalized to satisfy $1 \\leq \\lvert a\\rvert < 2$, the exponent can be taken to be an integer, possibly negative.\n\n\nAs per IEEE Standard 754, the `Float64` type gives 52 bits to the precision (with an additional implied one), 11 bits to the exponent and the other bit is used to represent the sign.  Positive, finite, floating point numbers have a range approximately between $10^{-308}$ and $10^{308}$, as 308 is about $\\log_{10}\\cdot 2^{1023}$. The numbers are not evenly spread out over this range, but, rather, are much more concentrated closer to $0$.\n\n\n:::{.callout-warning}\n## More on floating point numbers\nYou can discover more about the range of floating point values provided by calling a few different functions.\n\n  * `typemax(0.0)` gives the largest value for the type (`Inf` in this case).\n  * `prevfloat(Inf)` gives the largest finite one, in general `prevfloat` is the next smallest floating point value.\n\n:::\n\n  * `nextfloat(-Inf)`, similarly,  gives the smallest finite floating point value, and in general returns the next largest floating point value.\n  * `nextfloat(0.0)` gives the closest positive value to 0.\n  * `eps()`  gives the distance to the next floating point number bigger than `1.0`. This is sometimes referred to as machine precision.\n\n\n#### Scientific notation\n\n\nFloating point numbers may print in a familiar manner:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nx = 1.23\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n1.23\n```\n:::\n:::\n\n\nor may be represented in scientific notation:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\n6.022 * 10.0^23\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n6.0219999999999996e23\n```\n:::\n:::\n\n\nThe special coding `aeb` (or if the exponent is negative `ae-b`) is used to represent the number $a \\cdot 10^b$ ($1 \\leq a < 10$). This notation can be used directly to specify a floating point value:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\navogadro = 6.022e23\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n6.022e23\n```\n:::\n:::\n\n\nHere `e` is decidedly *not* the Euler number, rather syntax to separate the exponent from the mantissa.\n\n\nThe first way of representing this number required using `10.0` and not `10` as the integer power will return an integer and even for 64-bit systems is only valid up to `10^18`. Using scientific notation avoids having to concentrate on such limitations.\n\n\n##### Example\n\n\nFloating point values in scientific notation will always be normalized. This is easy for the computer to do, but tedious to do by hand. Here we see:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\n4e30 * 3e40\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n1.2000000000000001e71\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\n3e40 / 4e30\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n7.5e9\n```\n:::\n:::\n\n\nThe power in the first is $71$, not $70 = 30+40$, as the product of $3$ and $4$ as $12$ or `1.2e^1`. (We also see the artifact of `1.2` not being exactly representable in floating point.)\n\n\n##### Example: 32-bit floating point\n\n\nIn some uses, such as using a GPU, $32$-bit floating point (single precision) is also common. These values may be specified with an `f` in place of the `e` in scientific notation:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\n1.23f0\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n1.23f0\n```\n:::\n:::\n\n\nAs with the use of `e`, some exponent is needed after the `f`, even if it is `0`.\n\n\n#### Special values: Inf, -Inf, NaN\n\n\nThe coding of floating point numbers also allows for the special values of `Inf`, `-Inf` to represent positive and negative infinity. As well, a special value `NaN` (\"not a number\") is used to represent a value that arises when an operation is not closed (e.g., $0.0/0.0$ yields `NaN`). (Technically `NaN` has several possible \"values,\" a point ignored here.) Except for negative bases, the floating point numbers with the addition of `Inf` and `NaN` are closed under the operations `+`, `-`, `*`, `/`, and `^`. Here are some computations that produce `NaN`:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\n0/0, Inf/Inf, Inf - Inf, 0 * Inf\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n(NaN, NaN, NaN, NaN)\n```\n:::\n:::\n\n\nWhereas, these produce an infinity\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\n1/0, Inf + Inf, 1 * Inf\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n(Inf, Inf, Inf)\n```\n:::\n:::\n\n\nFinally, these are mathematically undefined, but still yield a finite value with `Julia`:\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\n0^0, Inf^0\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n(1, 1.0)\n```\n:::\n:::\n\n\n#### Floating point numbers and real numbers\n\n\nFloating point numbers are an abstraction for the real numbers. For the most part this abstraction works in the background, though there are cases where one needs to have it in mind. Here are a few:\n\n\n  * For real and rational numbers, between any two numbers $a < b$, there is another real number in between. This is not so for floating point numbers which have a finite precision. (Julia has some functions for working with this distinction.)\n  * Floating point numbers are approximations for most values, even simple rational ones like $1/3$. This leads to oddities such as this value not being $0$:\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nsqrt(2)*sqrt(2) - 2\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n4.440892098500626e-16\n```\n:::\n:::\n\n\nIt is no surprise that an irrational number, like $\\sqrt{2}$, can't be represented **exactly** within floating point, but it is perhaps surprising that simple numbers can not be, so $1/3$, $1/5$, $\\dots$ are approximated. Here is a surprising-at-first consequence:\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\n1/10 + 2/10 == 3/10\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nfalse\n```\n:::\n:::\n\n\nThat is adding `1/10` and `2/10` is not exactly `3/10`, as expected mathematically. Such differences are usually very small and are generally attributed to rounding error. The user needs to be mindful when testing for equality, as is done above with the `==` operator.\n\n\n  * Floating point addition is not necessarily associative, that is the property $a + (b+c) = (a+b) + c$ may not hold exactly. For example:\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\n1/10 + (2/10 + 3/10) == (1/10 + 2/10) + 3/10\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nfalse\n```\n:::\n:::\n\n\n  * For real numbers subtraction of similar-sized numbers is not exceptional, for example $1 - \\cos(x)$ is positive if $0 < x < \\pi/2$, say. This will not be the case for floating point values. If $x$ is close enough to $0$, then $\\cos(x)$ and $1$ will be so close, that they will be represented by the same floating point value, `1.0`, so the difference will be zero:\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\n1.0 - cos(1e-8)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n0.0\n```\n:::\n:::\n\n\n### Rational numbers\n\n\nRational numbers can be used when the exactness of the number is more important than the speed or wider range of values offered by floating point numbers. In `Julia` a rational number is comprised of a numerator and a denominator, each an integer of the same type, and reduced to lowest terms. The operations of addition, subtraction, multiplication, and division will keep their answers as rational numbers. As well, raising a rational number to a positive, integer value will produce a rational number.\n\n\nAs mentioned, these are constructed using double slashes:\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\n1//2, 2//1, 6//4\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n(1//2, 2//1, 3//2)\n```\n:::\n:::\n\n\nRational numbers are exact, so the following are identical to their mathematical counterparts:\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\n1//10 + 2//10 == 3//10\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\ntrue\n```\n:::\n:::\n\n\nand associativity:\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\n(1//10 + 2//10) + 3//10 == 1//10 + (2//10 + 3//10)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\ntrue\n```\n:::\n:::\n\n\nHere we see that the type is preserved under the basic  operations:\n\n::: {.cell execution_count=25}\n``` {.julia .cell-code}\n(1//2 + 1//3 * 1//4 / 1//5) ^ 6\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n1771561//2985984\n```\n:::\n:::\n\n\nFor powers, a non-integer exponent is converted to floating point, so this operation is defined, though will always return a floating point value:\n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\n(1//2)^(1//2)   # the first parentheses are necessary as `^` will be evaluated before `//`.\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n0.7071067811865476\n```\n:::\n:::\n\n\n##### Example: different types of real numbers\n\n\nThis table shows what attributes are implemented for the different types.\n\n::: {.cell execution_count=27}\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n\n<div class=\"table-responsive\">\n<table class=\"table table-hover\">\n<tr><th>Attributes</th><th>Integer</th><th>Rational</th><th>FloatingPoint</th></tr>\n\n<tr><td><div class=\"markdown\"><p>construction</p>\n</div></td><td><div class=\"markdown\"><p><code>1</code></p>\n</div></td><td><div class=\"markdown\"><p><code>1//1</code></p>\n</div></td><td><div class=\"markdown\"><p><code>1.0</code></p>\n</div></td></tr>\n<tr><td><div class=\"markdown\"><p>exact</p>\n</div></td><td><div class=\"markdown\"><p>true</p>\n</div></td><td><div class=\"markdown\"><p>true</p>\n</div></td><td><div class=\"markdown\"><p>not usually</p>\n</div></td></tr>\n<tr><td><div class=\"markdown\"><p>wide range</p>\n</div></td><td><div class=\"markdown\"><p>false</p>\n</div></td><td><div class=\"markdown\"><p>false</p>\n</div></td><td><div class=\"markdown\"><p>true</p>\n</div></td></tr>\n<tr><td><div class=\"markdown\"><p>has infinity</p>\n</div></td><td><div class=\"markdown\"><p>false</p>\n</div></td><td><div class=\"markdown\"><p>false</p>\n</div></td><td><div class=\"markdown\"><p>true</p>\n</div></td></tr>\n<tr><td><div class=\"markdown\"><p>has <code>-0</code></p>\n</div></td><td><div class=\"markdown\"><p>false</p>\n</div></td><td><div class=\"markdown\"><p>false</p>\n</div></td><td><div class=\"markdown\"><p>true</p>\n</div></td></tr>\n<tr><td><div class=\"markdown\"><p>fast</p>\n</div></td><td><div class=\"markdown\"><p>true</p>\n</div></td><td><div class=\"markdown\"><p>false</p>\n</div></td><td><div class=\"markdown\"><p>true</p>\n</div></td></tr>\n<tr><td><div class=\"markdown\"><p>closed under</p>\n</div></td><td><div class=\"markdown\"><p><code>&#43;</code>, <code>-</code>, <code>*</code>, <code>^</code> &#40;non-negative exponent&#41;</p>\n</div></td><td><div class=\"markdown\"><p><code>&#43;</code>, <code>-</code>, <code>*</code>, <code>/</code> &#40;non zero denominator&#41;,<code>^</code> &#40;integer power&#41;</p>\n</div></td><td><div class=\"markdown\"><p><code>&#43;</code>, <code>-</code>, <code>*</code>, <code>/</code> &#40;possibly <code>NaN</code>, <code>Inf</code>&#41;,<code>^</code> &#40;non-negative base&#41;</p>\n</div></td></tr>\n\n</table>\n</div>\n\n```\n:::\n:::\n\n\n### Complex numbers\n\n\nComplex numbers in `Julia` are stored as two numbers, a real and imaginary part, each some type of `Real` number. The special constant `im` is used to represent $i=\\sqrt{-1}$.  This makes the construction of complex numbers fairly standard:\n\n::: {.cell execution_count=28}\n``` {.julia .cell-code}\n1 + 2im, 3 + 4.0im\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n(1 + 2im, 3.0 + 4.0im)\n```\n:::\n:::\n\n\n(These two aren't exactly the same, the `3` is promoted from an integer to a float to match the `4.0`. Each of the components must be of the same type of number.)\n\n\nMathematically, complex numbers are needed so that certain equations can be satisfied. For example $x^2 = -2$ has solutions $-\\sqrt{2}i$ and $\\sqrt{2}i$ over the complex numbers. Finding this in `Julia` requires some attention, as we have both `sqrt(-2)` and `sqrt(-2.0)` throwing a `DomainError`, as the `sqrt` function expects non-negative real arguments. However first creating a complex number does work:\n\n::: {.cell execution_count=29}\n``` {.julia .cell-code}\nsqrt(-2 + 0im)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n0.0 + 1.4142135623730951im\n```\n:::\n:::\n\n\nFor complex arguments, the `sqrt` function will return complex values (even if the answer is a real number).\n\n\nThis means, if you wanted to perform the quadratic equation for any real inputs, your computations might involve something like the following:\n\n::: {.cell execution_count=30}\n``` {.julia .cell-code}\na,b,c = 1,2,3  ## x^2 + 2x + 3\ndiscr = b^2 - 4a*c\n(-b + sqrt(discr + 0im))/(2a), (-b - sqrt(discr + 0im))/(2a)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n(-1.0 + 1.4142135623730951im, -1.0 - 1.4142135623730951im)\n```\n:::\n:::\n\n\nWhen learning calculus, the only common usage of complex numbers arises when solving polynomial equations for roots, or zeros, though they are very important for subsequent work using the concepts of calculus.\n\n\n:::{.callout-note}\n## Note\nThough complex numbers are stored as pairs of numbers, the imaginary unit, `im`, is of type `Complex{Bool}`, a type that can be promoted to more specific types when `im` is used with different number types.\n\n:::\n\n## Type stability\n\n\nOne design priority of `Julia` is that it should be fast. How can `Julia` do this? In a simple model, `Julia` is an interface between the user and the computer's processor(s). Processors consume a set of instructions, the user issues a set of commands. `Julia` is in charge of the translation between the two. Ultimately `Julia` calls a compiler to create the instructions. A basic premise is the shorter the instructions, the faster they are to process. Shorter instructions can come about by being more explicit about what types of values the instructions concern. Explicitness means, there is no need to reason about what a value can be. When `Julia` can reason about the type of value involved without having to reason about the values themselves, it can work with the compiler to produce shorter lists of instructions.\n\n\nSo knowing the type of the output of a function based only on the type of the inputs can be a big advantage. In `Julia` this is known as *type stability*. In the standard `Julia` library, this is a primary design consideration.\n\n\n##### Example: closure\n\n\nTo motivate this a bit, we discuss how mathematics can be shaped by a desire to stick to simple ideas.  A desirable algebraic property of a set of numbers and an operation is *closure*.  That is, if one takes an operation like `+` and then uses it to add two numbers in a set, will that result also be in the set? If this is so for any pair of numbers, then the set is closed with respect to the operation addition.\n\n\nLets suppose we start with the *natural numbers*: $1,2, \\dots$. Natural, in that we can easily represent small values in terms of fingers. This set is closed under addition - as a child learns when counting using their fingers. However, if we started with the odd natural numbers, this set would *not* be closed under addition - $3+3=6$.\n\n\nThe natural numbers are not all the numbers we need, as once a desire for subtraction is included, we find the set isn't closed. There isn't a $0$, needed as $n-n=0$ and there aren't negative numbers. The set of integers are needed for closure under addition and subtraction.\n\n\nThe integers are also closed under multiplication, which for integer values can be seen as just regrouping into longer additions.\n\n\nHowever, the integers are not closed under division - even if you put aside the pesky issue of dividing by $0$. For that, the rational numbers must be introduced. So aside from division by $0$, the rationals are closed under addition, subtraction, multiplication, and division. There is one more fundamental operation though, powers.\n\n\nPowers are defined for positive integers in a simple enough manner\n\n\n\n$$\na^n=a \\cdot a \\cdot a \\cdots a \\text{ (n times); }  a, n \\text{ are integers } n \\text{ is positive}.\n$$\n\n\nWe can define $a^0$ to be $1$, except for the special case of $0^0$, which is left undefined mathematically (though it is also defined as `1` within `Julia`). We can extend the above to include negative values of $a$, but what about negative values of $n$? We can't say the integers are closed under powers, as the definition consistent with the rules that $a^{(-n)} = 1/a^n$ requires rational numbers to be defined.\n\n\nWell, in the above `a` could be a rational number, is `a^n` closed for rational numbers? No again. Though it is fine for $n$ as an integer (save the odd case of $0$, simple definitions like $2^{1/2}$ are not answered within the rationals. For this, we need to introduce the *real* numbers. It is mentioned that [Aristotle](http://tinyurl.com/bpqbkap) hinted at the irrationality of the square root of $2$. To define terms like $a^{1/n}$ for integer values $a,n > 0$ a reference to a solution to an equation $x^n-a$ is used. Such solutions require the irrational numbers to have solutions in general. Hence the need for the real numbers (well, algebraic numbers at least, though once the exponent is no longer a rational number, the full set of real numbers are needed.)\n\n\nSo, save the pesky cases, the real numbers will be closed under addition, subtraction, multiplication, division, and powers - provided the base is non-negative.\n\n\nFinally for that last case, the complex numbers are introduced to give an answer to $\\sqrt{-1}$.\n\n\n---\n\nHow does this apply with `Julia`?\n\n\nThe point is, if we restrict our set of inputs, we can get more precise values for the output of basic operations, but to get more general inputs we need to have bigger output sets.\n\n\nA similar thing happens in `Julia`. For addition say, the addition of two integers of the same type will be an integer of that type. This speed consideration is not solely for type stability, but also to avoid checking for overflow.\n\n\nAnother example, the division of two integers will always be a number of the same type - floating point, as that is the only type that ensures the answer will always fit within. (The explicit use of rationals notwithstanding.) So even if two integers are the input and their answer *could* be an integer, in `Julia` it will be a floating point number, (cf. `2/1`).\n\n\nHopefully this helps explain the subtle issues around powers: in `Julia` an integer raised to an integer should be an integer, for speed, though certain cases are special cased, like `2^(-1)`.  However since a real number raised to a real number makes sense always when the base is non-negative, as long as real numbers are used as outputs, the expressions `2.0^(-1)` and `2^(-1.0)` are computed and real numbers (floating points) are returned. For type stability, even though $2.0^1$ could be an integer, a floating point answer is returned.\n\n\nAs for negative bases, `Julia` could always return complex numbers, but in addition to this being slower, it would be irksome to users. So user's must opt in. Hence `sqrt(-1.0)` will be an error, but the more explicit - but mathematically equivalent - `sqrt(-1.0 + 0im)` will not be a domain error, but rather a complex value will be returned.\n\n\n## Questions\n\n\n\n###### Question\n\n\nThe number created by `pi/2` is?\n\n::: {.cell hold='true' execution_count=32}\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7440588270067955454' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7440588270067955454\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7440588270067955454_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7440588270067955454\"\n              id=\"radio_7440588270067955454_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Integer\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7440588270067955454_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7440588270067955454\"\n              id=\"radio_7440588270067955454_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Rational\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7440588270067955454_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7440588270067955454\"\n              id=\"radio_7440588270067955454_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Floating point\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7440588270067955454_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7440588270067955454\"\n              id=\"radio_7440588270067955454_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Complex\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7440588270067955454_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7440588270067955454\"\n              id=\"radio_7440588270067955454_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None, an error occurs\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='7440588270067955454_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_7440588270067955454\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('7440588270067955454_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7440588270067955454\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7440588270067955454\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe number created by `2/2` is?\n\n::: {.cell hold='true' execution_count=33}\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='15630539238432023783' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_15630539238432023783\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15630539238432023783_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15630539238432023783\"\n              id=\"radio_15630539238432023783_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Integer\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15630539238432023783_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15630539238432023783\"\n              id=\"radio_15630539238432023783_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Rational\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15630539238432023783_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15630539238432023783\"\n              id=\"radio_15630539238432023783_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Floating point\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15630539238432023783_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15630539238432023783\"\n              id=\"radio_15630539238432023783_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Complex\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15630539238432023783_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15630539238432023783\"\n              id=\"radio_15630539238432023783_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None, an error occurs\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='15630539238432023783_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_15630539238432023783\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('15630539238432023783_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_15630539238432023783\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_15630539238432023783\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe number created by `2//2` is?\n\n::: {.cell hold='true' execution_count=34}\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='1206051283691700590' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_1206051283691700590\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1206051283691700590_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1206051283691700590\"\n              id=\"radio_1206051283691700590_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Integer\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1206051283691700590_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1206051283691700590\"\n              id=\"radio_1206051283691700590_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Rational\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1206051283691700590_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1206051283691700590\"\n              id=\"radio_1206051283691700590_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Floating point\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1206051283691700590_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1206051283691700590\"\n              id=\"radio_1206051283691700590_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Complex\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1206051283691700590_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1206051283691700590\"\n              id=\"radio_1206051283691700590_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None, an error occurs\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='1206051283691700590_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_1206051283691700590\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('1206051283691700590_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_1206051283691700590\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_1206051283691700590\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe number created by `1 + 1//2 + 1/3` is?\n\n::: {.cell hold='true' execution_count=35}\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16315216786502254108' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16315216786502254108\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16315216786502254108_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16315216786502254108\"\n              id=\"radio_16315216786502254108_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Integer\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16315216786502254108_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16315216786502254108\"\n              id=\"radio_16315216786502254108_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Rational\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16315216786502254108_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16315216786502254108\"\n              id=\"radio_16315216786502254108_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Floating point\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16315216786502254108_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16315216786502254108\"\n              id=\"radio_16315216786502254108_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Complex\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16315216786502254108_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16315216786502254108\"\n              id=\"radio_16315216786502254108_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None, an error occurs\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16315216786502254108_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_16315216786502254108\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('16315216786502254108_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16315216786502254108\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16315216786502254108\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe number created by `2^3` is?\n\n::: {.cell hold='true' execution_count=36}\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='18120571955783807854' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_18120571955783807854\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_18120571955783807854_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_18120571955783807854\"\n              id=\"radio_18120571955783807854_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Integer\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_18120571955783807854_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_18120571955783807854\"\n              id=\"radio_18120571955783807854_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Rational\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_18120571955783807854_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_18120571955783807854\"\n              id=\"radio_18120571955783807854_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Floating point\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_18120571955783807854_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_18120571955783807854\"\n              id=\"radio_18120571955783807854_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Complex\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_18120571955783807854_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_18120571955783807854\"\n              id=\"radio_18120571955783807854_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None, an error occurs\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='18120571955783807854_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_18120571955783807854\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('18120571955783807854_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_18120571955783807854\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_18120571955783807854\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe number created by `sqrt(im)` is?\n\n::: {.cell hold='true' execution_count=37}\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11160835371496509088' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11160835371496509088\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11160835371496509088_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11160835371496509088\"\n              id=\"radio_11160835371496509088_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Integer\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11160835371496509088_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11160835371496509088\"\n              id=\"radio_11160835371496509088_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Rational\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11160835371496509088_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11160835371496509088\"\n              id=\"radio_11160835371496509088_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Floating point\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11160835371496509088_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11160835371496509088\"\n              id=\"radio_11160835371496509088_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Complex\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11160835371496509088_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11160835371496509088\"\n              id=\"radio_11160835371496509088_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None, an error occurs\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11160835371496509088_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_11160835371496509088\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('11160835371496509088_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11160835371496509088\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11160835371496509088\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe number created by `2^(-1)` is?\n\n::: {.cell hold='true' execution_count=38}\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7600861875889362954' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7600861875889362954\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7600861875889362954_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7600861875889362954\"\n              id=\"radio_7600861875889362954_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Integer\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7600861875889362954_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7600861875889362954\"\n              id=\"radio_7600861875889362954_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Rational\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7600861875889362954_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7600861875889362954\"\n              id=\"radio_7600861875889362954_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Floating point\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7600861875889362954_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7600861875889362954\"\n              id=\"radio_7600861875889362954_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Complex\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7600861875889362954_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7600861875889362954\"\n              id=\"radio_7600861875889362954_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None, an error occurs\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='7600861875889362954_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_7600861875889362954\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('7600861875889362954_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7600861875889362954\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7600861875889362954\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe \"number\" created by `1/0` is?\n\n::: {.cell hold='true' execution_count=39}\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3076507061381767057' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3076507061381767057\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3076507061381767057_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3076507061381767057\"\n              id=\"radio_3076507061381767057_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Integer\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3076507061381767057_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3076507061381767057\"\n              id=\"radio_3076507061381767057_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Rational\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3076507061381767057_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3076507061381767057\"\n              id=\"radio_3076507061381767057_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Floating point\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3076507061381767057_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3076507061381767057\"\n              id=\"radio_3076507061381767057_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Complex\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3076507061381767057_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3076507061381767057\"\n              id=\"radio_3076507061381767057_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None, an error occurs\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3076507061381767057_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_3076507061381767057\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('3076507061381767057_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3076507061381767057\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3076507061381767057\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nIs `(2 + 6) + 7` equal to  `2 + (6 + 7)`?\n\n::: {.cell hold='true' execution_count=40}\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='10766033261339582419' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_10766033261339582419\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10766033261339582419_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10766033261339582419\"\n              id=\"radio_10766033261339582419_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10766033261339582419_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10766033261339582419\"\n              id=\"radio_10766033261339582419_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='10766033261339582419_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_10766033261339582419\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('10766033261339582419_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_10766033261339582419\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_10766033261339582419\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nIs `(2/10 + 6/10) + 7/10` equal to `2/10 + (6/10 + 7/10)`?\n\n::: {.cell hold='true' execution_count=41}\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='15780077242466113948' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_15780077242466113948\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15780077242466113948_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15780077242466113948\"\n              id=\"radio_15780077242466113948_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_15780077242466113948_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_15780077242466113948\"\n              id=\"radio_15780077242466113948_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='15780077242466113948_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_15780077242466113948\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('15780077242466113948_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_15780077242466113948\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_15780077242466113948\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe following *should* compute `2^(-1)`, which if entered directly will return `0.5`. Does it?\n\n``` {.julia .cell-code}\na, b = 2, -1\na^b\n```\n\n\n::: {.cell hold='true' execution_count=43}\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11937623802218491586' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11937623802218491586\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11937623802218491586_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11937623802218491586\"\n              id=\"radio_11937623802218491586_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11937623802218491586_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11937623802218491586\"\n              id=\"radio_11937623802218491586_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11937623802218491586_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_11937623802218491586\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('11937623802218491586_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11937623802218491586\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11937623802218491586\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n(This shows the special casing that is done when powers use literal numbers.)\n\n",
    "supporting": [
      "numbers_types_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}