{
  "hash": "0a512672c93bc4dc2b75c39061f4fb57",
  "result": {
    "markdown": "# The Graph of a Function\n\n\n\nThis section will use the following packages:\n\n``` {.julia .cell-code}\nusing CalculusWithJulia\nusing Plots\n```\n\n\n\n\n---\n\n\nA scalar, univariate function, such as $f(x) = 1 - x^2/2$, can be thought of in many different ways. For example:\n\n\n  * It can be represented through a rule of what it does to $x$, as above. This is useful for computing numeric values.\n  * it can be interpreted verbally, as in *square* $x$, take half then *subtract* from one. This can give clarity to what the function does.\n  * It can be thought of in terms of its properties: a polynomial, continuous, $U$-shaped, an approximation for $\\cos(x)$ near $0$, $\\dots$\n  * it can be visualized graphically. This is useful for seeing the qualitative behavior of a function.\n\n\nThe graph of a univariate function is just a set of points in the Cartesian plane. These points come from the relation $(x,f(x))$ that defines the function. Operationally, a sketch of the graph will consider a handful of such pairs and then the rest of the points will be imputed.\n\n\nFor example, a typical approach to plot $f(x) = 1 - x^2/2$ would be to choose some values for $x$ and find the corresponding values of $y$. This might be organized in a \"T\"-table:\n\n\n\n```{verbatim}\n x | y\n--------\n-2 |  -1\n-1 |  1/2\n 0 |   1\n 1 |  1/2\n 2 |  -1\n 3 | -7/2\n```\n\n\nThese pairs would be plotted in a Cartesian plane and then connected with curved lines. A good sketch is aided by knowing ahead of time that this function describes a parabola which is curving downwards.\n\n\nWe note that this sketch would not include *all* the pairs $(x,f(x))$, as their extent is infinite, rather a well chosen collection of points over some finite domain.\n\n\n## Graphing a function with Julia\n\n\n`Julia` has several different options for rendering graphs, all in external packages. We will focus in these notes on the `Plots` package, which provides a common interface to several different plotting backends. (Click through for instructions for plotting with the [Makie](../alternatives/makie_plotting.html) package or the [PlotlyLight](alternatives/plotly_plotting.html) package.) At the top of this section the accompanying `CalculusWithJulia` package and  the `Plots` package were loaded with the `using` command, like this:\n\n``` {.julia .cell-code}\nusing CalculusWithJulia\nusing Plots\n```\n\n\n:::{.callout-note}\n## Note\n`Plots` is a frontend for one of several backends. `Plots` comes with a backend for web-based graphics (call `plotly()` to specify that); a backend for static graphs (call `gr()` for that). If the `PyPlot` package is installed, calling `pyplot()` will set that as a backend. For terminal usage, if the `UnicodePlots` package is installed, calling `unicodeplots()` will enable that usage. There are still other backends.\n\n:::\n\nThe `plotly` backend is part of the `Plots` package, as is `gr`. Other backends require installation, such as `PyPlot` and `PlotlyJS`. We use `gr` in these notes, for the most part. (The `plotly` backend is also quite nice for interactive usage, but doesn't work as well with the static HTML pages.)\n\n\nWith `Plots` loaded, it is straightforward to graph a function.\n\n\nFor example, to graph $f(x) = 1 - x^2/2$ over the interval $[-3,3]$ we have:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nf(x) = 1 - x^2/2\nplot(f, -3, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](plotting_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\nThe `plot` command does the hard work behind the scenes. It needs $2$ pieces of information declared:\n\n\n  * **What** to plot. With this invocation, this detail is expressed by passing a function object to `plot`\n  * **Where** to plot; the `xmin` and `xmax` values. As with a sketch, it is impossible in this case to render a graph with all possible $x$ values in the domain of $f$, so we need to pick some viewing window. In the example this is $[-3,3]$ which is expressed by passing the two endpoints as the second and third arguments.\n\n\nPlotting a function is then this simple: `plot(f, xmin, xmax)`.\n\n\n> *A basic template:* Many operations we meet will take the form `action(function, args...)`, as the call to `plot` does. The template shifts the focus to the action to be performed. This is a [declarative](http://en.wikipedia.org/wiki/Declarative_programming) style, where the details to execute the action are only exposed as needed.\n\n\n\n:::{.callout-note}\n## Note\nThe time to first plot can feel sluggish, but subsequent plots will be speedy. See the technical note at the end of this section for an explanation.\n\n:::\n\nLet's see some other graphs.\n\n\nThe `sin` function over one period is plotted through:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nplot(sin, 0, 2pi)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](plotting_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\nWe can make a graph of $f(x) = (1+x^2)^{-1}$ over $[-3,3]$ with\n\n::: {.cell hold='true' execution_count=7}\n``` {.julia .cell-code}\nf(x) = 1 / (1 + x^2)\nplot(f, -3, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](plotting_files/figure-html/cell-8-output-1.svg){}\n:::\n:::\n\n\nA graph of $f(x) = e^{-x^2/2}$ over $[-2,2]$ is produced with:\n\n::: {.cell hold='true' execution_count=8}\n``` {.julia .cell-code}\nf(x) = exp(-x^2/2)\nplot(f, -2, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](plotting_files/figure-html/cell-9-output-1.svg){}\n:::\n:::\n\n\nWe could skip the first step of defining a function by using an *anonymous function*. For example, to plot $f(x) = \\cos(x) - x$ over $[0, \\pi/2]$ we could do:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nplot(x -> cos(x) - x, 0, pi/2)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](plotting_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\nAnonymous functions are especially helpful when parameterized functions are involved:\n\n::: {.cell hold='true' execution_count=10}\n``` {.julia .cell-code}\nmxplusb(x; m=1, b=0) = m*x + b\nplot(x -> mxplusb(x; m=-1, b=1), -1, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](plotting_files/figure-html/cell-11-output-1.svg){}\n:::\n:::\n\n\nHad we parameterized using the `f(x,p)` style, the result would be similar:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nfunction mxplusb(x, p)\n    m, b = p.m, p.b\n    m * x + b\nend\nplot(x -> mxplusb(x, (m=-1, b=1)), -1, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](plotting_files/figure-html/cell-12-output-1.svg){}\n:::\n:::\n\n\n:::{.callout-note}\n## Note\nThe function object in the general pattern `action(function, args...)` is commonly specified in one of three ways: by a name, as with `f`; as an anonymous function; or as the return value of some other action through composition.\n\n:::\n\nAnonymous functions are also created by `Julia's` `do` notation, which is useful when the first argument to  function (like `plot`) accepts a function:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nplot(0, pi/2) do x\n    cos(x) - x\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](plotting_files/figure-html/cell-13-output-1.svg){}\n:::\n:::\n\n\nThe `do` notation can be a bit confusing to read when unfamiliar, though its convenience makes it appealing.\n\n\n:::{.callout-note}\n## Note\nSome types we will encounter, such as the one for symbolic values or the special polynomial one, have their own `plot` recipes that allow them to be plotted similarly as above, even though they are not functions.\n\n:::\n\n---\n\nMaking a graph with `Plots` is easy, but producing a graph that is informative can be a challenge, as the choice of a viewing window can make a big difference in what is seen. For example, trying to make a graph of $f(x) = \\tan(x)$, as below, will result in a bit of a mess - the chosen viewing window crosses several places where the function blows up:\n\n::: {.cell hold='true' execution_count=13}\n``` {.julia .cell-code}\nf(x) = tan(x)\nplot(f, -10, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](plotting_files/figure-html/cell-14-output-1.svg){}\n:::\n:::\n\n\nThough this graph shows the asymptote structure and periodicity, it doesn't give much insight into each period or even into the fact that the function is periodic.\n\n\n## The details of graph making\n\n\nThe actual details of making a graph of $f$ over $[a,b]$ are pretty simple and follow the steps in making a \"T\"-table:\n\n\n  * A set of $x$ values are created between $a$ and $b$.\n  * A corresponding set of $y$ values are created.\n  * The pairs $(x,y)$ are plotted as points and connected with straight lines.\n\n\nThe only real difference is that when drawing by hand, we might know to curve the lines connecting points based on an analysis of the function. As `Julia` doesn't consider this, the points are connected with straight lines – like a dot-to-dot puzzle.\n\n\nIn general, the `x` values are often generated by `range` or the `colon` operator and the `y` values produced by mapping or broadcasting a function over the generated `x` values.\n\n\nHowever, the plotting directive `plot(f, xmin, xmax)` calls an adaptive algorithm to use more points where needed, as judged by `PlotUtils.adapted_grid(f, (xmin, xmax))`. It computes both the `x` and `y` values.  This algorithm is wrapped up into the `unzip(f, xmin, xmax)` function from `CalculusWithJulia`.  The algorithm adds more points where the function is more \"curvy\" and uses fewer points where it is \"straighter.\" Here we see the linear function is identified as needing far fewer points than the oscillating function when plotted over the same range:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\npts_needed(f, xmin, xmax) = length(unzip(f, xmin, xmax)[1])\npts_needed(x -> 10x, 0, 10), pts_needed(x -> sin(10x), 0, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n(31, 1605)\n```\n:::\n:::\n\n\n(In fact, the `21` is the minimum number of points used for any function; a linear function only needs two.)\n\n---\n\n\nFor instances where a *specific* set of $x$ values is desired to be used, the `range` function or colon operator can be used to create the $x$ values and broadcasting used to create the $y$ values. For example, if we were to plot $f(x) = \\sin(x)$ over $[0,2\\pi]$ using $10$ points, we might do:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\n𝒙s = range(0, 2pi, length=10)\n𝒚s = sin.(𝒙s)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n10-element Vector{Float64}:\n  0.0\n  0.6427876096865393\n  0.984807753012208\n  0.8660254037844387\n  0.3420201433256689\n -0.34202014332566866\n -0.8660254037844385\n -0.9848077530122081\n -0.6427876096865396\n -2.4492935982947064e-16\n```\n:::\n:::\n\n\nFinally, to plot the set of points and connect with lines, the $x$ and $y$ values are passed along as vectors:\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nplot(𝒙s, 𝒚s)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](plotting_files/figure-html/cell-17-output-1.svg){}\n:::\n:::\n\n\nThis plots the points as pairs and then connects them in order using straight lines. Basically, it creates a dot-to-dot graph. The above graph looks primitive, as it doesn't utilize enough points.\n\n\n##### Example: Reflections\n\n\nThe graph of a function may be reflected through a line, as those seen with a mirror. For example, a reflection through the $y$ axis takes a point $(x,y)$ to the point $(-x, y)$. We can easily see this graphically, when we have sets of $x$ and $y$ values through a judiciously placed minus sign.\n\n\nFor example, to plot $\\sin(x)$ over $(-\\pi,\\pi)$ we might do:\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nxs = range(-pi, pi, length=100)\nys = sin.(xs)\nplot(xs, ys)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![](plotting_files/figure-html/cell-18-output-1.svg){}\n:::\n:::\n\n\nTo reflect this graph through the $y$ axis, we only need to plot `-xs` and not `xs`:\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nplot(-xs, ys)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n![](plotting_files/figure-html/cell-19-output-1.svg){}\n:::\n:::\n\n\nLooking carefully we see there is a difference. (How?)\n\n\nThere are four very common reflections:\n\n\n  * reflection through the $y$-axis takes $(x,y)$ to $(-x, y)$.\n  * reflection through the $x$-axis takes $(x,y)$ to $(x, -y)$.\n  * reflection through the origin takes $(x,y)$ to $(-x, -y)$.\n  * reflection through the line $y=x$ takes $(x,y)$ to $(y,x)$.\n\n\nFor the $\\sin(x)$ graph, we see that reflecting through the $x$ axis produces the same graph as reflecting through the $y$ axis:\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nplot(xs, -ys)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](plotting_files/figure-html/cell-20-output-1.svg){}\n:::\n:::\n\n\nHowever, reflecting through the origin leaves this graph unchanged:\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nplot(-xs,  -ys)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n![](plotting_files/figure-html/cell-21-output-1.svg){}\n:::\n:::\n\n\n> An *even function* is one where reflection through the $y$ axis leaves the graph unchanged. That is, $f(-x) = f(x)$.  An *odd function* is one where a reflection through the origin leaves the graph unchanged, or symbolically $f(-x) = -f(x)$.\n\n\n\nIf we try reflecting the graph of $\\sin(x)$ through the line $y=x$, we have:\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\nplot(ys, xs)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n![](plotting_files/figure-html/cell-22-output-1.svg){}\n:::\n:::\n\n\nThis is the graph of the equation $x = \\sin(y)$, but is not the graph of a function as the same $x$ can map to more than one $y$ value. (The new graph does not pass the \"vertical line\" test.)\n\n\nHowever, for the sine function we can get a function from this reflection if we choose a narrower viewing window:\n\n::: {.cell hold='true' execution_count=22}\n``` {.julia .cell-code}\nxs = range(-pi/2, pi/2, length=100)\nys = sin.(xs)\nplot(ys, xs)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n![](plotting_files/figure-html/cell-23-output-1.svg){}\n:::\n:::\n\n\nThe graph is that of the \"inverse function\" for $\\sin(x), x \\text{ in } [-\\pi/2, \\pi/2]$.\n\n\n#### The `plot(xs, f)` syntax\n\n\nWhen plotting a univariate function there are three basic patterns that can be employed. We have examples above of:\n\n\n  * `plot(f, xmin, xmax)` uses an adaptive algorithm to identify values for $x$ in the interval `[xmin, xmas]`,\n  * `plot(xs, f.(xs))` to manually choose the values of $x$ to plot points for, and\n\n\nFinally there is a merging of these following either of these patterns:\n\n\n  * `plot(f, xs)` *or*  `plot(xs, f)`\n\n\nBoth require a manual choice of the values of the $x$-values to plot, but the broadcasting is carried out in the `plot` command. This style is convenient, for example, to down sample the $x$ range to see the plotting mechanics, such as:\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\nplot(0:pi/4:2pi, sin)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n![](plotting_files/figure-html/cell-24-output-1.svg){}\n:::\n:::\n\n\n#### NaN values\n\n\nAt times it is not desirable to draw lines between each succesive point. For example, if there is a discontinuity in the function or if there were a vertical asymptote, such as what happens at $0$ with $f(x) = 1/x$.\n\n\nThe most straightforward plot is dominated by the vertical asymptote at $x=0$:\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\nq(x) = 1/x\nplot(q, -1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n![](plotting_files/figure-html/cell-25-output-1.svg){}\n:::\n:::\n\n\nWe can attempt to improve this graph by adjusting the viewport. The *viewport* of a graph is the $x$-$y$ range of the viewing window.  By default, the $y$-part of the viewport is determined by the range of the function over the specified interval, $[a,b]$. As just seen, this approach can produce poor graphs.  The `ylims=(ymin, ymax)` argument can modify what part of the $y$ axis is shown. (Similarly `xlims=(xmin, xmax)` will modify the viewport in the $x$ direction.)\n\n\nAs we see, even with this adjustment, the spurious line connecting the points with $x$ values closest to $0$ is still drawn:\n\n::: {.cell execution_count=25}\n``` {.julia .cell-code}\nplot(q, -1, 1, ylims=(-10,10))\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n![](plotting_files/figure-html/cell-26-output-1.svg){}\n:::\n:::\n\n\nThe dot-to-dot algorithm, at some level, assumes the underlying function is continuous; here $q(x)=1/x$ is not.\n\n\nThere is a convention for most plotting programs that **if** the $y$ value for a point is `NaN` that no lines will connect to that point, `(x,NaN)`. `NaN` conveniently appears in many cases where a plot may have an issue, though not with $1/x$ as `1/0` is `Inf` and not `NaN`. (Unlike, say, `0/0` which is NaN.)\n\n\nHere is one way to plot $q(x) = 1/x$ over $[-1,1]$ taking advantage of this convention:\n\n::: {.cell hold='true' execution_count=26}\n``` {.julia .cell-code}\nxs = range(-1, 1, length=251)\nys = q.(xs)\nys[xs .== 0.0] .= NaN\nplot(xs, ys)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n![](plotting_files/figure-html/cell-27-output-1.svg){}\n:::\n:::\n\n\nBy using an odd number of points, we should have that $0.0$ is amongst the `xs`. The next to last line replaces the $y$ value that would be infinite with `NaN`.\n\n\nAs a recommended alternative, we might modify the function so that if it is too large, the values are replaced by `NaN`. Here is one such function consuming a function and returning a modified function put to use to make this graph:\n\n::: {.cell execution_count=27}\n``` {.julia .cell-code}\nrangeclamp(f, hi=20, lo=-hi; replacement=NaN) = x -> lo < f(x) < hi ? f(x) : replacement\nplot(rangeclamp(x -> 1/x), -1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n![](plotting_files/figure-html/cell-28-output-1.svg){}\n:::\n:::\n\n\n(The `clamp` function is a base `Julia` function which clamps a number between `lo` and `hi`, returning `lo` or `hi` if `x` is outside that range.)\n\n\n## Layers\n\n\nGraphing more than one function over the same viewing window is often desirable. Though this is easily done in `Plots` by specifying a vector of functions as the first argument to `plot` instead of a single function object, we instead focus on building the graph layer by layer.\n\n\nFor example, to see that a polynomial and the cosine function are \"close\" near $0$, we can plot *both* $\\cos(x)$ and the function $f(x) = 1 - x^2/2$ over $[-\\pi/2,\\pi/2]$:\n\n::: {.cell hold='true' execution_count=28}\n``` {.julia .cell-code}\nf(x) = 1 - x^2/2\nplot(cos, -pi/2, pi/2, label=\"cos\")\nplot!(f, -pi/2, pi/2, label=\"f\")\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n![](plotting_files/figure-html/cell-29-output-1.svg){}\n:::\n:::\n\n\nAnother useful function to add to a plot is one to highlight the $x$ axis. This makes identifying zeros of the function easier. The anonymous function `x -> 0` will do this. But, perhaps less cryptically, so will the base function `zero`. For example\n\n::: {.cell hold='true' execution_count=29}\n``` {.julia .cell-code}\nf(x) = x^5 - x + 1\nplot(f, -1.5, 1.4, label=\"f\")\nplot!(zero, label=\"zero\")\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n![](plotting_files/figure-html/cell-30-output-1.svg){}\n:::\n:::\n\n\n(The job of `zero` is to return \"$0$\" in the appropriate type. There is also a similar `one` function in base `Julia`.)\n\n\nThe `plot!` call adds a layer. We could still specify the limits for the plot, though as this can be computed from the figure, to plot `zero` we let `Plots` do it.\n\n\nFor another example, suppose we wish to plot the function $f(x)=x\\cdot(x-1)$ over the interval $[-1,2]$ and emphasize with points the fact that $0$ and $1$ are zeros. We can do this with three layers: the first to graph the function, the second to emphasize the $x$ axis, the third to graph the points.\n\n::: {.cell hold='true' execution_count=30}\n``` {.julia .cell-code}\nf(x) = x*(x-1)\nplot(f, -1, 2, legend=false)   # turn off legend\nplot!(zero)\nscatter!([0,1], [0,0])\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n![](plotting_files/figure-html/cell-31-output-1.svg){}\n:::\n:::\n\n\nThe $3$ main functions used in these notes for adding layers are:\n\n\n  * `plot!(f, a, b)` to add the graph of the function `f`; also `plot!(xs, ys)`\n  * `scatter!(xs, ys)` to add points $(x_1, y_1), (x_2, y_2), \\dots$.\n  * `annotate!((x,y, label))` to add a label at $(x,y)$\n\n\n:::{.callout-warning}\n## Warning\nJulia has a convention to use functions named with a `!` suffix to indicate that they mutate some object. In this case, the object is the current graph, though it is implicit. Both `plot!`, `scatter!`, and `annotate!` (others too) do this by adding a layer.\n\n:::\n\n## Additional arguments\n\n\nThe `Plots` package provides many arguments for adjusting a graphic, here we mention just a few of the [attributes](https://docs.juliaplots.org/latest/attributes/):\n\n\n  * `plot(..., title=\"main title\", xlab=\"x axis label\", ylab=\"y axis label\")`: add title and label information to a graphic\n  * `plot(..., color=\"green\")`: this argument can be used to adjust the color of the drawn figure (color can be a string,`\"green\"`, or a symbol, `:green`, among other specifications)\n  * `plot(..., linewidth=5)`: this argument can be used to adjust the width of drawn lines\n  * `plot(..., xlims=(a,b), ylims=(c,d)`: either or both `xlims` and `ylims` can be used to control the viewing window\n  * `plot(..., linestyle=:dash)`: will change the line style of the plotted lines to dashed lines. Also `:dot`, ...\n  * `plot(..., aspect_ratio=:equal)`: will keep $x$ and $y$ axis on same scale so that squares look square.\n  * `plot(..., legend=false)`: by default, different layers will be indicated with a legend, this will turn off this feature\n  * `plot(..., label=\"a label\")` the `label` attribute will show up when a legend is present. Using an empty string, `\"\"`, will suppress add the layer to the legend.\n\n\nFor plotting points with `scatter`, or `scatter!` the markers can be adjusted via\n\n\n  * `scatter(..., markersize=5)`: increase marker size\n  * `scatter(..., marker=:square)`: change the marker (uses a symbol, not a string to specify)\n\n\nOf course, zero, one, or more of these can be used on any given call to `plot`, `plot!`, `scatter` or `scatter!`.\n\n\n## Graphs of parametric equations\n\n\nIf we have two functions $f(x)$ and $g(x)$ there are a few ways to investigate their joint behavior. As just mentioned, we can graph both $f$ and $g$ over the same interval using layers. Such a graph allows an easy comparison of the shape of the two functions and can be useful in solving $f(x) = g(x)$. For the latter, the graph of $h(x) = f(x) - g(x)$ is also of value: solutions to $f(x)=g(x)$ appear as crossing points on the graphs of `f` and `g`, whereas they appear as zeros (crossings of the $x$-axis) when `h` is plotted.\n\n\nA different graph can be made to compare the two functions side-by-side. This is a parametric plot. Rather than plotting points $(x,f(x))$ and $(x,g(x))$ with two separate graphs, the graph consists of points $(f(x), g(x))$. We illustrate with some examples below:\n\n\n##### Example\n\n\nThe most \"famous\" parametric graph is one that is likely already familiar, as it follows the parametrization of points on the unit circle by the angle made between the $x$ axis and the ray from the origin through the point. (If not familiar, this will soon be discussed in these notes.)\n\n::: {.cell execution_count=31}\n``` {.julia .cell-code}\n𝒇(x) = cos(x); 𝒈(x) = sin(x)\n𝒕s = range(0, 2pi, length=100)\nplot(𝒇.(𝒕s), 𝒈.(𝒕s), aspect_ratio=:equal)   # make equal axes\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n![](plotting_files/figure-html/cell-32-output-1.svg){}\n:::\n:::\n\n\nAny point $(a,b)$ on this graph is represented by $(\\cos(t), \\sin(t))$ for some value of $t$, and in fact multiple values of $t$, since $t + 2k\\pi$ will produce the same $(a,b)$ value as $t$ will.\n\n\nMaking the parametric plot is similar to creating a plot using lower level commands. There  a sequence of values is generated to approximate the $x$ values in the graph (`xs`), a set of commands to create the corresponding function values (e.g., `f.(xs)`), and some instruction on how to represent the values, in this case with lines connecting the points (the default for `plot` for two sets of numbers).\n\n\nIn this next plot, the angle values are chosen to be the familiar ones, so the mechanics of the graph can be emphasized. Only the upper half is plotted:\n\n::: {.cell hold='true' execution_count=32}\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div class=\"data-frame\"><p>9 rows × 3 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>θ</th><th>x</th><th>y</th></tr><tr><th></th><th title=\"Sym\">Sym</th><th title=\"Sym\">Sym</th><th title=\"Sym\">Sym</th></tr></thead><tbody><tr><th>1</th><td>0</td><td>1</td><td>0</td></tr><tr><th>2</th><td>pi/6</td><td>sqrt(3)/2</td><td>1/2</td></tr><tr><th>3</th><td>pi/4</td><td>sqrt(2)/2</td><td>sqrt(2)/2</td></tr><tr><th>4</th><td>pi/3</td><td>1/2</td><td>sqrt(3)/2</td></tr><tr><th>5</th><td>pi/2</td><td>0</td><td>1</td></tr><tr><th>6</th><td>2*pi/3</td><td>-1/2</td><td>sqrt(3)/2</td></tr><tr><th>7</th><td>3*pi/4</td><td>-sqrt(2)/2</td><td>sqrt(2)/2</td></tr><tr><th>8</th><td>5*pi/6</td><td>-sqrt(3)/2</td><td>1/2</td></tr><tr><th>9</th><td>pi</td><td>-1</td><td>0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {.cell hold='true' execution_count=33}\n``` {.julia .cell-code}\nθs =[0, pi/6, pi/4, pi/3, pi/2, 2pi/3, 3pi/4, 5pi/6, pi]\nplot(𝒇.(θs), 𝒈.(θs), legend=false, aspect_ratio=:equal)\nscatter!(𝒇.(θs), 𝒈.(θs))\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n![](plotting_files/figure-html/cell-34-output-1.svg){}\n:::\n:::\n\n\n---\n\nAs with the plot of a univariate function, there is a convenience interface for these plots - just pass the two functions in:\n\n::: {.cell execution_count=34}\n``` {.julia .cell-code}\nplot(𝒇, 𝒈, 0, 2pi, aspect_ratio=:equal)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n![](plotting_files/figure-html/cell-35-output-1.svg){}\n:::\n:::\n\n\n##### Example\n\n\nLooking at growth. Comparing $x^2$ with $x^3$ can run into issues, as the scale gets big:\n\n::: {.cell execution_count=35}\n``` {.julia .cell-code}\nx²(x) = x^2\nx³(x) = x^3\nplot(x², 0, 25)\nplot!(x³, 0, 25)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n![](plotting_files/figure-html/cell-36-output-1.svg){}\n:::\n:::\n\n\nIn the above, `x³` is already $25$ times larger on the scale of $[0,25]$ and this only gets worse if the viewing window were to get larger. However, the parametric graph is quite different:\n\n::: {.cell execution_count=36}\n``` {.julia .cell-code}\nplot(x², x³, 0, 25)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n![](plotting_files/figure-html/cell-37-output-1.svg){}\n:::\n:::\n\n\nIn this graph, as $x^3/x^2 = x$, as $x$ gets large, the ratio stays reasonable.\n\n\n##### Example\n\n\nParametric plots are useful to compare the ratio of values near a point. In the above example, we see how this is helpful for large `x`. This example shows it is convenient for a fixed `x`, in this case `x=0`.\n\n\nPlot $f(x) = x^3$ and $g(x) = x - \\sin(x)$ around $x=0$:\n\n::: {.cell hold='true' execution_count=37}\n``` {.julia .cell-code}\nf(x) = x^3\ng(x) = x - sin(x)\nplot(f, g, -pi/2, pi/2)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n![](plotting_files/figure-html/cell-38-output-1.svg){}\n:::\n:::\n\n\nThis graph is *nearly* a straight line. At the point $(0,0)=(g(0), g(0))$, we see that both functions are behaving in a similar manner, though the slope is not $1$, so they do not increase at exactly the same rate.\n\n\n##### Example: Etch A Sketch\n\n\n[Etch A sketch](http://en.wikipedia.org/wiki/Etch_A_Sketch) is a drawing toy where two knobs control the motion of a pointer, one knob controlling the $x$ motion, the other the $y$ motion. The trace of the movement of the pointer is recorded until the display is cleared by shaking. Shake to clear is now a motion incorporated by some smart-phone apps.\n\n\nPlaying with the toy makes a few things become clear:\n\n\n  * Twisting just the left knob (the horizontal or $x$ motion) will move the pointer left or right, leaving a horizontal line. Parametrically, this would follow the equations $f(t) = \\xi(t)$ for some $\\xi$ and $g(t) = c$.\n  * Twisting just the right knob (the vertical or $y$ motion) will move the pointer up or down, leaving a vertical line.  Parametrically, this would follow the equations $f(t) = c$  and $g(t) = \\psi(t)$ for some $\\psi$.\n  * Drawing a line with a slope different from $0$ or $\\infty$ requires moving both knobs at the same time. A $45$$^\\circ$ line with slope $m=1$ can be made by twisting both at the same rate, say through $f(t) = ct$, $g(t)=ct$. It doesn't matter how big $c$ is, just that it is the same for both $f$ and $g$. Creating a different slope is done by twisting at different rates, say $f(t)=ct$ and $g(t)=dt$. The slope of the resulting line will be $d/c$.\n  * Drawing a curve is done by twisting the two knobs with varying rates.\n\n\nThese all apply to parametric plots, as the Etch A Sketch trace is no more than a plot of $(f(t), g(t))$ over some range of values for $t$, where $f$ describes the movement in time of the left knob and $g$ the movement in time of the right.\n\n\nNow, we revist the last problem in the context of this. We saw in the last problem that the parametric graph was nearly a line - so close the eye can't really tell otherwise. That means that the growth in  both $f(t) = t^3$ and $g(t)=t - \\sin(t)$ for $t$ around $0$ are in a nearly fixed ratio, as otherwise the graph would have more curve in it.\n\n\n##### Example: Spirograph\n\n\nParametric plots can describe a richer set of curves than can plots of functions. Plots of functions must pass the \"vertical-line test\", as there can be at most one $y$ value for a given $x$ value. This is not so for parametric plots, as the circle example above shows. Plotting sines and cosines this way is the basis for the once popular [Spirograph](http://en.wikipedia.org/wiki/Spirograph#Mathematical_basis) toy. The curves drawn there are parametric plots where the functions come from rolling a smaller disc either around the outside or inside of a larger disc.\n\n\nHere is an example using a parameterization provided on the Wikipedia page where $R$ is the radius of the larger disc, $r$ the radius of the smaller disc and $\\rho < r$ indicating the position of the pencil within the smaller disc.\n\n::: {.cell hold='true' execution_count=38}\n``` {.julia .cell-code}\nR, r, rho = 1, 1/4, 1/4\nf(t) = (R-r) * cos(t) + rho * cos((R-r)/r * t)\ng(t) = (R-r) * sin(t) - rho * sin((R-r)/r * t)\n\nplot(f, g, 0, max((R-r)/r, r/(R-r))*2pi)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n![](plotting_files/figure-html/cell-39-output-1.svg){}\n:::\n:::\n\n\nIn the above, one can fix $R=1$. Then different values for `r` and `rho` will produce different graphs. These graphs will be periodic if $(R-r)/r$ is a rational. (Nothing about these equations requires $\\rho < r$.)\n\n\n## Questions\n\n\n###### Question\n\n\nPlot the function $f(x) = x^3 - x$. When is the function positive?\n\n::: {.cell hold='true' execution_count=39}\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16127946522943624982' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16127946522943624982\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16127946522943624982_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16127946522943624982\"\n              id=\"radio_16127946522943624982_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-1, 0&#41;</code> and <code>&#40;1, Inf&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16127946522943624982_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16127946522943624982\"\n              id=\"radio_16127946522943624982_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-Inf, -1&#41;</code> and <code>&#40;0,1&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16127946522943624982_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16127946522943624982\"\n              id=\"radio_16127946522943624982_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-Inf, -0.577&#41;</code> and <code>&#40;0.577, Inf&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16127946522943624982_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_16127946522943624982\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('16127946522943624982_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16127946522943624982\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16127946522943624982\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nPlot the function $f(x) = 3x^4 + 8x^3 - 18x^2$. Where (what $x$ value) is the smallest value? (That is, for which input $x$ is the output $f(x)$ as small as possible.\n\n::: {.cell hold='true' execution_count=40}\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='15724451581352236805' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_15724451581352236805\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"15724451581352236805\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='15724451581352236805_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"15724451581352236805\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - -3) <= 0.25);\n  var msgBox = document.getElementById('15724451581352236805_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_15724451581352236805\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_15724451581352236805\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nPlot the function $f(x) = 3x^4 + 8x^3 - 18x^2$. When is the function increasing?\n\n::: {.cell hold='true' execution_count=41}\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='14635625520046165630' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_14635625520046165630\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14635625520046165630_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14635625520046165630\"\n              id=\"radio_14635625520046165630_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-Inf, -4.1&#41;</code> and <code>&#40;1.455, Inf&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14635625520046165630_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14635625520046165630\"\n              id=\"radio_14635625520046165630_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-3, 0&#41;</code> and <code>&#40;1, Inf&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14635625520046165630_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14635625520046165630\"\n              id=\"radio_14635625520046165630_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#40;-Inf, -3&#41;</code> and <code>&#40;0, 1&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='14635625520046165630_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_14635625520046165630\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('14635625520046165630_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_14635625520046165630\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_14635625520046165630\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nGraphing both `f` and the line $y=0$  helps focus on the *zeros* of `f`. When `f(x)=log(x)-2`, plot `f` and the line $y=0$.  Identify the lone zero.\n\n::: {.cell hold='true' execution_count=42}\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='5058784784522847431' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_5058784784522847431\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"5058784784522847431\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='5058784784522847431_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"5058784784522847431\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 7.38905609893065) <= 0.5);\n  var msgBox = document.getElementById('5058784784522847431_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_5058784784522847431\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_5058784784522847431\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nPlot the function $f(x) = x^3 - x$ over $[-2,2]$. How many zeros are there?\n\n::: {.cell hold='true' execution_count=43}\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='1387342844302408635' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_1387342844302408635\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"1387342844302408635\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='1387342844302408635_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"1387342844302408635\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 3) <= 1.0e-16);\n  var msgBox = document.getElementById('1387342844302408635_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_1387342844302408635\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_1387342844302408635\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe function $f(x) = (x^3 - 2x) / (2x^2 -10)$ is a rational function with issues when $2x^2 = 10$, or $x = -\\sqrt{5}$ or $\\sqrt{5}$.\n\n\nPlot this function from $-5$ to $5$. How many times does it cross the $x$ axis?\n\n::: {.cell hold='true' execution_count=44}\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='6028010930721302843' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_6028010930721302843\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"6028010930721302843\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='6028010930721302843_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"6028010930721302843\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 3) <= 0.2);\n  var msgBox = document.getElementById('6028010930721302843_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_6028010930721302843\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_6028010930721302843\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nA trash collection plan charges a flat rate of 35 dollars a month for the first 10 bags of trash and is 4 dollars a bag thereafter. Which function will model this:\n\n::: {.cell hold='true' execution_count=45}\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='10124982469383023673' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_10124982469383023673\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10124982469383023673_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10124982469383023673\"\n              id=\"radio_10124982469383023673_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x &lt;&#61; 35.0 ? 10.0 : 10.0 &#43; 35.0 * &#40;x-4&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10124982469383023673_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10124982469383023673\"\n              id=\"radio_10124982469383023673_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x &lt;&#61; 10   ? 35.0 : 35.0 &#43;  4.0 * &#40;x-10&#41;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_10124982469383023673_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_10124982469383023673\"\n              id=\"radio_10124982469383023673_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>f&#40;x&#41; &#61; x &lt;&#61; 4    ? 35.0 : 35.0 &#43; 10.0 * &#40;x-4&#41;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='10124982469383023673_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_10124982469383023673\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('10124982469383023673_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_10124982469383023673\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_10124982469383023673\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nMake a plot of the model. Graphically estimate how many bags of trash will cost 55 dollars.\n\n::: {.cell hold='true' execution_count=46}\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='2504488756169616938' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_2504488756169616938\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"2504488756169616938\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='2504488756169616938_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"2504488756169616938\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 15) <= 0.5);\n  var msgBox = document.getElementById('2504488756169616938_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_2504488756169616938\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_2504488756169616938\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nPlot the functions $f(x) = \\cos(x)$ and $g(x) = x$. Estimate the $x$ value of where the two graphs intersect.\n\n::: {.cell hold='true' execution_count=47}\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='15023743690749233780' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_15023743690749233780\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"15023743690749233780\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='15023743690749233780_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"15023743690749233780\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 0.7390851332151607) <= 0.25);\n  var msgBox = document.getElementById('15023743690749233780_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_15023743690749233780\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_15023743690749233780\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe fact that only a finite number of points are used in a graph can introduce artifacts. An example can appear when plotting [sinusoidal](http://en.wikipedia.org/wiki/Aliasing#Sampling_sinusoidal_functions) functions. An example is the graph of `f(x) = sin(500*pi*x)` over `[0,1]`.\n\n\nMake its graph using 250 evenly spaced points, as follows:\n\n``` {.julia .cell-code}\nxs = range(0, 1, length=250)\nf(x) = sin(500*pi*x)\nplot(xs, f.(xs))\n```\n\n\nWhat is seen?\n\n::: {.cell hold='true' execution_count=49}\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3735170239516407379' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3735170239516407379\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3735170239516407379_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3735170239516407379\"\n              id=\"radio_3735170239516407379_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Oddly, it looks exactly like the graph of \\(f(x) = \\sin(2\\pi x)\\).\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3735170239516407379_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3735170239516407379\"\n              id=\"radio_3735170239516407379_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It oscillates wildly, as the period is \\(T=2\\pi/(500 \\pi)\\) so there are 250 oscillations.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_3735170239516407379_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_3735170239516407379\"\n              id=\"radio_3735170239516407379_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It should oscillate evenly, but instead doesn&#39;t oscillate very much near 0 and 1\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3735170239516407379_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_3735170239516407379\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('3735170239516407379_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3735170239516407379\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3735170239516407379\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nThe algorithm to plot a function works to avoid aliasing issues. Does the graph generated by `plot(f, 0, 1)` look the same, as the one above?\n\n::: {.cell hold='true' execution_count=50}\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='4617721992590639941' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_4617721992590639941\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4617721992590639941_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4617721992590639941\"\n              id=\"radio_4617721992590639941_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        No, but is still looks pretty bad, as fitting 250 periods into a too small number of pixels is a problem.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4617721992590639941_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4617721992590639941\"\n              id=\"radio_4617721992590639941_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4617721992590639941_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4617721992590639941\"\n              id=\"radio_4617721992590639941_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        No, the graph shows clearly all 250 periods.\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='4617721992590639941_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_4617721992590639941\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('4617721992590639941_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_4617721992590639941\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_4617721992590639941\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nMake this parametric plot for the specific values of the parameters `k` and `l`. What shape best describes it?\n\n``` {.julia .cell-code}\nR, r, rho = 1, 3/4, 1/4\nf(t) = (R-r) * cos(t) + rho * cos((R-r)/r * t)\ng(t) = (R-r) * sin(t) - rho * sin((R-r)/r * t)\n\nplot(f, g, 0, max((R-r)/r, r/(R-r))*2pi, aspect_ratio=:equal)\n```\n\n\n::: {.cell hold='true' execution_count=52}\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='14774450686233454076' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_14774450686233454076\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14774450686233454076_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14774450686233454076\"\n              id=\"radio_14774450686233454076_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four sharp points, like a star\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14774450686233454076_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14774450686233454076\"\n              id=\"radio_14774450686233454076_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        An ellipse\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14774450686233454076_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14774450686233454076\"\n              id=\"radio_14774450686233454076_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        A straight line\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14774450686233454076_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14774450686233454076\"\n              id=\"radio_14774450686233454076_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four petals, like a flower\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='14774450686233454076_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_14774450686233454076\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('14774450686233454076_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_14774450686233454076\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_14774450686233454076\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nFor these next questions, we use this function:\n\n::: {.cell execution_count=53}\n``` {.julia .cell-code}\nfunction spirograph(R, r, rho)\n  f(t) = (R-r) * cos(t) + rho * cos((R-r)/r * t)\n  g(t) = (R-r) * sin(t) - rho * sin((R-r)/r * t)\n\n  plot(f, g, 0, max((R-r)/r, r/(R-r))*2pi, aspect_ratio=:equal)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\nspirograph (generic function with 1 method)\n```\n:::\n:::\n\n\nMake this plot for the following specific values of the parameters `R`, `r`, and `rho`. What shape best describes it?\n\n``` {.julia .cell-code}\nR, r, rho = 1, 3/4, 1/4\n```\n\n\n::: {.cell hold='true' execution_count=55}\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='9340901234861938762' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_9340901234861938762\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9340901234861938762_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9340901234861938762\"\n              id=\"radio_9340901234861938762_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four sharp points, like a star\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9340901234861938762_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9340901234861938762\"\n              id=\"radio_9340901234861938762_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four petals, like a flower\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9340901234861938762_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9340901234861938762\"\n              id=\"radio_9340901234861938762_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        An ellipse\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9340901234861938762_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9340901234861938762\"\n              id=\"radio_9340901234861938762_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        A straight line\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_9340901234861938762_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_9340901234861938762\"\n              id=\"radio_9340901234861938762_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None of the above\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='9340901234861938762_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_9340901234861938762\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('9340901234861938762_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_9340901234861938762\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_9340901234861938762\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nMake this plot for the following specific values of the parameters `R`, `r`, and `rho`. What shape best describes it?\n\n``` {.julia .cell-code}\nR, r, rho = 1, 1/2, 1/4\n```\n\n\n::: {.cell hold='true' execution_count=57}\n\n::: {.cell-output .cell-output-display execution_count=53}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17626858952125222593' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17626858952125222593\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17626858952125222593_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17626858952125222593\"\n              id=\"radio_17626858952125222593_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four sharp points, like a star\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17626858952125222593_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17626858952125222593\"\n              id=\"radio_17626858952125222593_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four petals, like a flower\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17626858952125222593_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17626858952125222593\"\n              id=\"radio_17626858952125222593_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        An ellipse\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17626858952125222593_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17626858952125222593\"\n              id=\"radio_17626858952125222593_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        A straight line\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17626858952125222593_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17626858952125222593\"\n              id=\"radio_17626858952125222593_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None of the above\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17626858952125222593_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_17626858952125222593\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('17626858952125222593_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17626858952125222593\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17626858952125222593\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nMake this plot for the specific values of the parameters `R`, `r`, and `rho`. What shape best describes it?\n\n``` {.julia .cell-code}\nR, r, rho = 1, 1/4, 1\n```\n\n\n::: {.cell hold='true' execution_count=59}\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='463064648088722446' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_463064648088722446\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_463064648088722446_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_463064648088722446\"\n              id=\"radio_463064648088722446_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four sharp points, like a star\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_463064648088722446_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_463064648088722446\"\n              id=\"radio_463064648088722446_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four petals, like a flower\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_463064648088722446_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_463064648088722446\"\n              id=\"radio_463064648088722446_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        A circle\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_463064648088722446_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_463064648088722446\"\n              id=\"radio_463064648088722446_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        A straight line\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_463064648088722446_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_463064648088722446\"\n              id=\"radio_463064648088722446_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None of the above\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='463064648088722446_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_463064648088722446\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('463064648088722446_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_463064648088722446\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_463064648088722446\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nMake this plot for the specific values of the parameters `R`, `r`, and `rho`. What shape best describes it?\n\n``` {.julia .cell-code}\nR, r, rho = 1, 1/8, 1/4\n```\n\n\n::: {.cell hold='true' execution_count=61}\n\n::: {.cell-output .cell-output-display execution_count=55}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17005915810917738722' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17005915810917738722\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17005915810917738722_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17005915810917738722\"\n              id=\"radio_17005915810917738722_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four sharp points, like a star\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17005915810917738722_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17005915810917738722\"\n              id=\"radio_17005915810917738722_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Four petals, like a flower\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17005915810917738722_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17005915810917738722\"\n              id=\"radio_17005915810917738722_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        A circle\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17005915810917738722_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17005915810917738722\"\n              id=\"radio_17005915810917738722_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        A straight line\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17005915810917738722_5\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17005915810917738722\"\n              id=\"radio_17005915810917738722_5\" value=\"5\">\n      </input>\n      <span class=\"label-body px-1\">\n        None of the above\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17005915810917738722_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_17005915810917738722\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 5;\n    var msgBox = document.getElementById('17005915810917738722_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17005915810917738722\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17005915810917738722\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n---\n\n\n## Technical note\n\n\nThe slow \"time to first plot\" in `Julia` is a well-known hiccup that is related to how `Julia` can be so fast. Loading Plots and the making the first plot are both somewhat time consuming, though the second and subsequent plots are speedy. Why?\n\n\n`Julia` is an interactive language that attains its speed by compiling functions on the fly using the [llvm](llvm.org) compiler. When `Julia` encounters a new combination of a function method and argument types it will compile and cache a function for subsequent speedy execution. The first plot is slow, as there are many internal functions that get compiled. This has sped up of late, as excessive recompilations have been trimmed down, but still has a way to go. This is different from \"precompilation\" which also helps trim down time for initial executions. There are also some more technically challenging means to create `Julia` images for faster start up that can be pursued if needed.\n\n",
    "supporting": [
      "plotting_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}