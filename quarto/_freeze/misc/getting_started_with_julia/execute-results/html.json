{
  "hash": "dd1ccb0d48da91eb97d915a25190328e",
  "result": {
    "markdown": "# Getting started with Julia\n\n\n\n\n\nJulia is a freely available, open-source programming language aimed at technical computing.\n\n\nAs it is open source, indeed with a liberal MIT license, it can be installed for free on many types of computers (though not phones or tablets).\n\n\n## Running Julia through the web\n\n\nThere are a few services for running `Julia` through the web. Mentioned here is [Binder](https://mybinder.org), which provides a web-based interface to `Julia` built around `Jupyter`.  `Jupyter` is a wildly succesful platform for interacting with different open-source software programs.\n\n\n[lauch binder](https://mybinder.org/v2/gh/CalculusWithJulia/CwJScratchPad.git/master)\n\n\nClicking the launch link above will open a web page which provides a blank notebook, save for a package used by these notes. However, `Binder` is nowhere near as reliable as a local installation.\n\n\n## Installing Julia locally\n\n\nInstalling `Julia` locally is not more difficult than installing other software.\n\n\nBinaries of `Julia` are provided at [julialang.org](http://julialang.org/downloads/). Julia has an official released version and a developmental version. Unless there is a compelling reason, the latest released version should be downloaded and installed for use.\n\n\nFor Windows users, there is a `juliaup` program for managing the installation of Julia.\n\n\nThe base `Julia` provides a *command-line interface*, or REPL (read-evaluate-parse).\n\n\n## Basic interactive usage\n\n\nOnce installed, `Julia` can be started by clicking on an icon or typing `julia` at the command line. Either will open a *command line interface* for a user to interact with a `Julia` process. The basic workflow is easy: commands are typed then sent to a `Julia` process when the \"return\" key is pressed for a complete expression. Then the output is displayed.\n\n\nA command is typed following the *prompt*. An example might be `2 + 2`. To send the command to the `Julia` interpreter the \"return\" key is pressed. A complete expression or expressions will then be parsed and evaluated (executed). If the expression is not complete, `julia`'s prompt will still accept input to complete the expression. Type `2 +` to see. (The expression `2 +` is not complete, as the infix operator `+` expects two arguments, one on its left and one on its right.)\n\n``` {.julia .cell-code}\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.7.0 (2021-11-30)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia> 2 + 2\n4\n```\n\n\nAbove, `julia>` is the prompt.  These notes will not include the prompt, so that copying-and-pasting can be more easily used. Input and output cells display similarly, though with differences in coloring. For example:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n4\n```\n:::\n:::\n\n\nWhile many prefer a command line for interacting with `Julia`, when learning a notebook interfaces is suggested. (An IDE like [Julia for Visual Studio Code](https://www.julia-vscode.org/) might be preferred for experienced programmers). In   [Julia interfaces](./julia_interfaces.html), we describe two different notebook interfaces that are available through add-on packages.\n\n\n## Add-on packages\n\n\n`Julia` is well on its way towards 10,000 external add-on packages that enhance the offerings of base `Julia`. We refer to one, `CalculusWithJulia`, that is designed to accompany these notes. [Installation notes](./calculus_with_julia.html) are available.\n\n\nIn `Julia` graphics are provided only by add-on packages â€“ there is no built-in graphing. This is the case under `Pluto` or `Jupyter` or the command line.\n\n\nIn these notes, we use the `Plots` package and its default backend. The `Plots` package provides a common interface to several different backends; this choice is easily changed. The `gr` backend is used in these notes, though for interactive use the `Plotly` backend has advantages; for more complicated graphics, `pyplot` has some advantages; for publication `PGFPlotsX` has advantages.\n\n\nThe package, if installed, is loaded as any other package:\n\n``` {.julia .cell-code}\nusing Plots\n```\n\n\nWith that in hand, to make a graph of a function over a range, we follow this pattern:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nplot(sin, 0, 2pi)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](getting_started_with_julia_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "getting_started_with_julia_files"
    ],
    "filters": [],
    "includes": {}
  }
}