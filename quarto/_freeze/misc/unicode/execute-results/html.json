{
  "hash": "80abea2a40b3488b1cec8d5c3ccc1c6b",
  "result": {
    "markdown": "# Usages of Unicode symbols\n\n\n\n`Julia` allows the use of *Unicode* symbols to replace variable names and for function calls. Unicode operations are entered in this pattern `\\name[tab]`. That is a slash, `\\`, the name (e.g., `alpha`), and then a press of the `tab` key.\n\n\nIn these notes, the following may appear as variable or function names\n\n\n| `\\Name`  | Symbol | Usage notes                     |\n|:-------- |:------ |:------------------------------- |\n| `\\euler` | `ℯ`    | The variable `e`                |\n| `\\pi`    | `π`    |                                 |\n| `\\alpha` | `α`    |                                 |\n| `\\beta`  | `β`    |                                 |\n| `\\delta` | `δ`    |                                 |\n| `\\Delta` | `Δ`    | Change, as in `Δx`              |\n| `\\gamma` | `γ`    |                                 |\n| `\\phi`   | `ϕ`    |                                 |\n| `\\Phi`   | `Φ`    | Used for parameterized surfaces |\n| `x\\_1`   | `x₁`   | Subscripts                      |\n| `r\\vec`  | `r⃗`   | Vector annotation               |\n| `T\\hat`  | `T̂`   | Unit vector annotation          |\n\n\nThe following are associated with derivatives\n\n\n| `\\Name`    | Symbol | Usage notes                 |\n|:---------- |:------ |:--------------------------- |\n| `\\partial` | `∂`    |                             |\n| `\\nabla`   | `∇`    | del operator in CwJ package |\n\n\nThe following are *infix* operators\n\n\n| `\\Name`  | Symbol | Usage notes   |\n|:-------- |:------ |:------------- |\n| `\\circ`  | `∘`    | composition   |\n| `\\cdot`  | `⋅`    | dot product   |\n| `\\times` | `×`    | cross product |\n\n\nInfix operators may need parentheses due to precedence rules. For example, to call a composition, one needs `(f ∘ g)(x)` so that composition happens before function evaluation (`g(x)`).\n\n",
    "supporting": [
      "unicode_files"
    ],
    "filters": [],
    "includes": {}
  }
}