{
  "hash": "025581529e56a77657fa92e8662e85b9",
  "result": {
    "markdown": "# Vectors and matrices\n\n\n\nThis section uses these add-on package:\n\n``` {.julia .cell-code}\nusing CalculusWithJulia\nusing Plots\nusing LinearAlgebra\nusing SymPy\n```\n\n\n\n\n---\n\n\nIn [vectors](../precalc/vectors.html) we introduced the concept of a vector.  For `Julia`, vectors are a useful storage container and are used to hold, for example, zeros of functions or the coefficients of a polynomial. This section is about their mathematical properties.  A [vector](https://en.wikipedia.org/wiki/Euclidean_vector) mathematically is a geometric object with two attributes a magnitude and a direction. (The direction is undefined in the case the magnitude is $0$.) Vectors are typically visualized with an arrow, where the anchoring of the arrow is context dependent and is not particular to a given vector.\n\n\nVectors and points are related, but distinct. They are identified when the tail of the vector is taken to be the origin. Let's focus on $3$ dimensions. Mathematically, the notation for a point is $p=(x,y,z)$ while the notation for a vector is $\\vec{v} = \\langle x, y, z \\rangle$. The $i$th component in a vector is referenced by a subscript: $v_i$. With this, we may write a typical vector as $\\vec{v} = \\langle v_1, v_2, \\dots, v_n \\rangle$ and a vector in $n=3$ as $\\vec{v} =\\langle v_1, v_2, v_3 \\rangle$. The different grouping notation distinguishes the two objects. As another example, the notation $\\{x, y, z\\}$ indicates a set. Vectors and points may be *identified* by anchoring the vector at the origin. Sets are quite different from both, as the order of their entries is not unique.\n\n\nIn `Julia`, the notation to define a point and a vector would be identical, using square brackets to group like-type values: `[x, y, z]`. The notation `(x,y,z)` would form a [tuple](https://en.wikipedia.org/wiki/Euclidean_vector) which though similar in many respects, are different, as tuples do not have the operations associated with a point or a vector defined for them.\n\n\nThe square bracket constructor has some subtleties:\n\n\n  * `[x,y,z]` calls `vect` and creates a 1-dimensional array\n  * `[x; y; z]` calls `vcat` to **v**ertically con**cat**enate values together. With simple (scalar) values `[x,y,z]` and `[x; y; z]` are identical, but not in other cases. (For example, is `A` is a matrix then `[A, A]` is a vector of matrices, `[A; A]` is a matrix combined from the two pieces.\n  * `[x y z]`\t calls `hcat` to **h**orizontally con**cat**enate values together. If `x`, `y` are numbers then `[x y]` is *not* a vector, but rather a $2$D array with a single row and two columns.\n  * finally `[w x; y z]` calls `hvcat` to horizontally and vertically concatenate values together to create a container in two dimensions, like a matrix.\n\n\n(A vector, mathematically, is a one-dimensional collection of numbers, a matrix a two-dimensional *rectangular* collection of numbers, and an array an $n$-dimensional rectangular-like collection of numbers. In `Julia`, a vector can hold a collection of objects of arbitrary type, though each will be promoted to a common type.)\n\n\n## Vector addition, scalar multiplication\n\n\nAs seen earlier, vectors have some arithmetic operations defined for them. As a typical use of vectors, mathematically, is to collect the $x$, $y$, and  $z$ (in $3$D) components together, operations like addition and subtraction operate component wise. With this, addition can be visualized geometrically: put the tail of $\\vec{v}$ at the tip of $\\vec{u}$ and draw a vector from the tail of $\\vec{u}$ to the tip of $\\vec{v}$ and you have $\\vec{u}+\\vec{v}$. This is identical by $\\vec{v} + \\vec{u}$ as vector addition is commutative. Unless $\\vec{u}$ and $\\vec{v}$ are parallel or one has $0$ length, the addition will create a vector with a different direction from the two.\n\n\nAnother operation for vectors is *scalar* multiplication. Geometrically this changes the magnitude, but not the direction of a vector, when the *scalar* is positive. Scalar multiplication is defined component wise, like addition so the $i$th component of $c \\vec{v}$ is $c$ times the $i$th component of $\\vec{v}$. When the scalar is negative, the direction is \"reversed.\"\n\n\nTo illustrate we define two $3$-dimensional vectors:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nu, v = [1, 2, 3], [4, 3, 2]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n([1, 2, 3], [4, 3, 2])\n```\n:::\n:::\n\n\nThe sum is component-wise summation (`1+4, 2+3, 3+2`):\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nu + v\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n3-element Vector{Int64}:\n 5\n 5\n 5\n```\n:::\n:::\n\n\nFor addition, as the components must pair off, the two vectors being added must be the same dimension.\n\n\nScalar multiplication by `2`, say, multiplies each entry by `2`:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n2 * u\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n3-element Vector{Int64}:\n 2\n 4\n 6\n```\n:::\n:::\n\n\n## The length and direction of a vector\n\n\nIf a vector $\\vec{v} = \\langle v_1, v_2, \\dots, v_n\\rangle$ then the *norm* (also Euclidean norm or length) of $\\vec{v}$ is defined by:\n\n\n\n$$\n\\| \\vec{v} \\| = \\sqrt{ v_1^2 + v_2^2 + \\cdots + v_n^2}.\n$$\n\n\nThe definition of a norm leads to a few properties. First, if $c$ is a scalar, $\\| c\\vec{v} \\| = |c| \\| \\vec{v} \\|$ - which says scalar multiplication by $c$ changes the length by $|c|$. (Sometimes, scalar multiplication is described as \"scaling by....\") The other property is an analog of the triangle inequality, in which for any two vectors $\\| \\vec{v} + \\vec{w} \\| \\leq \\| \\vec{v} \\| + \\| \\vec{w} \\|$. The right hand side is equal only when the two vectors are parallel.\n\n\nA vector with length $1$ is called a *unit* vector. Dividing a non-zero vector by its norm will yield a unit vector, a consequence of the first property above. Unit vectors are often written with a \"hat:\" $\\hat{v}$.\n\n\nThe direction indicated by $\\vec{v}$ can be visualized as an angle in $2$- or $3$-dimensions, but in higher dimensions, visualization is harder. For $2$-dimensions, we might associate with a vector, it's unit vector. This in turn may be identified with a point on the unit circle, which from basic trigonometry can be associated with an angle. Something similar, can be done in $3$ dimensions, using two angles. However, the \"direction\" of a vector is best thought of in terms of its associated unit vector. With this, we have a decomposition of a non-zero vector $\\vec{v}$ into a magnitude  and a direction when we write $\\vec{v} = \\|\\vec{v}\\| \\cdot (\\vec{v} / \\|\\vec{v}\\|)=\\|\\vec{v}\\| \\hat{v}$.\n\n\n## Visualization of vectors\n\n\nVectors may be visualized in $2$ or $3$ dimensions using `Plots`. In $2$ dimensions, the `quiver` function may be used. To graph a vector, it must have its tail placed at a point, so two values are needed.\n\n\nTo plot `u=[1,2]` from `p=[0,0]` we have the following usage:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nquiver([0],[0], quiver=([1],[2]))\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](vectors_files/figure-html/cell-8-output-1.svg){}\n:::\n:::\n\n\nThe cumbersome syntax is typical here. We naturally describe vectors and points using `[a,b,c]` to combine them, but the plotting functions want to plot many such at a time and expect vectors containing just the `x` values, just the `y` values, etc. The above usage looks a bit odd, as these vectors of `x` and `y` values have only one entry. Converting from the one representation to the other requires reshaping the data. We will use the `unzip` function from `CalculusWithJulia` which in turn just uses the the `invert` function of the `SplitApplyCombine` package (\"return a new nested container by reversing the order of the nested container\") for the bulk of its work.\n\n\nThis function takes a vector of vectors, and returns a vector containing the `x` values, the `y` values, etc. So if  `u=[1,2,3]` and `v=[4,5,6]`, then `unzip([u,v])` becomes `[[1,4],[2,5],[3,6]]`, etc. (The `zip` function in base does essentially the reverse operation, hence the name.) Notationally, `A = [u,v]` can have the third element of the first vector (`u`) accessed by `A[1][3]`, where as `unzip(A)[3][1]` will do the same. We use `unzip([u])` in the following, which for this `u` returns `([1],[2],[3])`. (Note the `[u]` to make a vector of a vector.)\n\n\nWith `unzip` defined, we can plot a $2$-dimensional vector `v` anchored at point `p` through `quiver(unzip([p])..., quiver=unzip([v]))`.\n\n\nTo illustrate, the following defines $3$ vectors (the third through addition), then graphs all three, though in different starting points to emphasize the geometric interpretation of vector addition.\n\n::: {.cell hold='true' execution_count=8}\n``` {.julia .cell-code}\nu = [1, 2]\nv = [4, 2]\nw = u + v\np = [0,0]\nquiver(unzip([p])..., quiver=unzip([u]))\nquiver!(unzip([u])..., quiver=unzip([v]))\nquiver!(unzip([p])..., quiver=unzip([w]))\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](vectors_files/figure-html/cell-9-output-1.svg){}\n:::\n:::\n\n\nPlotting a $3$-d vector is not supported in all toolkits with `quiver`. A line segment may be substituted and can be produced with `plot(unzip([p,p+v])...)`. To avoid all these details, the `CalculusWithJulia` provides the `arrow!` function to *add* a vector to an existing plot. The function requires a point, `p`, and the vector, `v`:\n\n\nWith this, the above simplifies to:\n\n::: {.cell hold='true' execution_count=9}\n``` {.julia .cell-code}\nu = [1, 2]\nv = [4, 2]\nw = u + v\np = [0,0]\nplot(legend=false)\narrow!(p, u)\narrow!(u, v)\narrow!(p, w)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](vectors_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\nThe distinction between a point and a vector within `Julia` is only mental. We use the same storage type. Mathematically, we can **identify** a point and a vector, by considering the vector with its tail placed at the origin. In this case, the tip of the arrow is located at the point. But this is only an identification, though a useful one. It allows us to \"add\" a point and a vector (e.g., writing $P + \\vec{v}$) by imagining the point as a vector anchored at the origin.\n\n\nTo see that a unit vector has the same \"direction\" as the vector, we might draw them with different widths:\n\n::: {.cell hold='true' execution_count=10}\n``` {.julia .cell-code}\nv = [2, 3]\nu = v / norm(v)\np = [0, 0]\nplot(legend=false)\narrow!(p, v)\narrow!(p, u, linewidth=5)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](vectors_files/figure-html/cell-11-output-1.svg){}\n:::\n:::\n\n\nThe `norm` function is in the standard library, `LinearAlgebra`, which must be loaded first through the command `using LinearAlgebra`. (Though here it is redundant, as that package is loaded and reexported when the `CalculusWithJulia` package is loaded.)\n\n\n## Aside: review of `Julia`'s use of dots to work with containers\n\n\n`Julia` makes use of the dot, \"`.`\", in a few ways to simplify usage when containers, such as vectors, are involved:\n\n\n  * **Splatting**. The use of three dots, \"`...`\", to \"splat\" the values from a container like a vector (or tuple) into *arguments* of a function can be very convenient. It was used above in the definition for the `arrow!` function: essentially `quiver!(unzip([p])..., quiver=unzip([v]))`. The `quiver` function expects $2$ (or $3$) arguments describing the `xs` and `ys` (and sometimes `zs`). The `unzip` function returns these in a container, so splatting is used to turn the values in the container into distinct arguments of the function. Whereas the `quiver` argument expects a tuple of vectors, so no splatting is used for that part of the definition. Another use of splatting we will see is with functions of vectors. These can be defined in terms of the vector's components or the vector as a whole, as below:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nf(x, y, z) = x^2 + y^2 + z^2\nf(v) = v[1]^2 + v[2]^2 + v[3]^2\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nf (generic function with 2 methods)\n```\n:::\n:::\n\n\nThe first uses the components and is arguably, much easier to read. The second uses indexing in the function body to access the components. It has an advantage, as it can more easily handle different length vectors (e.g. using `sum(v.^2)`). Both uses have their merits, though the latter is more idiomatic throughout `Julia`.\n\n\nIf a function is easier to write in terms of its components, but an interface expects a vector of components as it argument, then splatting can be useful, to go from one style to another, similar to this:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\ng(x, y, z) = x^2 + y^2 + z^2\ng(v) = g(v...)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ng (generic function with 2 methods)\n```\n:::\n:::\n\n\nThe splatting will mean `g(v)` eventually calls `g(x, y, z)` through `Julia`'s multiple dispatch machinery when `v = [x, y, z]`.\n\n\n(The three dots can also appear in the definition of the arguments to a function, but there the usage is not splatting but rather a specification of a variable number of arguments.)\n\n\n  * **Broadcasting**. For a univariate function, `f`, and vector, `xs`, the call `f.(xs)` *broadcasts* `f` over each value of `xs` and returns a container holding all the values. This is a compact alternative to a comprehension when a function is defined.  When `f` depends on more than one value, broadcasting can still be used: `f.(xs, ys)` will broadcast `f` over values formed from *both* `xs` and `ys`. Broadcasting has the extra feature (over `map`) of attempting to match up the shapes of `xs` and `ys` when they are not identical. (See the help page for `broadcast` for more details.)\n\n\nFor example, if `xs` is a vector and `ys` a scalar, then the value in `ys` is repeated many times to match up with the values of `xs`. Or if `xs` and `ys` have different dimensions, the values of one will be repeated. Consider this:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\n𝐟(x,y) = x + y\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n𝐟 (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell hold='true' execution_count=14}\n``` {.julia .cell-code}\nxs = ys = [0, 1]\n𝐟.(xs, ys)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n2-element Vector{Int64}:\n 0\n 2\n```\n:::\n:::\n\n\nThis matches `xs` and `ys` to pass `(0,0)` and then `(1,1)` to `f`, returning `0` and `2`. Now consider\n\n::: {.cell hold='true' execution_count=15}\n``` {.julia .cell-code}\nxs = [0, 1]; ys = [0 1]  # xs is a column vector, ys a row vector\n𝐟.(xs, ys)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n2×2 Matrix{Int64}:\n 0  1\n 1  2\n```\n:::\n:::\n\n\nThe two dimensions are different so for each value of `xs` the vector of `ys` is broadcast. This returns a matrix now. This will be important for some plotting usages where a grid (matrix) of values is needed.\n\n\nAt times using the \"apply\" notation: `x |> f`, in place of using `f(x)` is useful, as it can move the wrapping function to the right of the expression. To broadcast,  `.|>` is available.\n\n\n## The dot product\n\n\nThere is no concept of multiplying two vectors, or for that matter dividing two vectors. However, there are two operations between vectors that are somewhat similar to multiplication, these being the dot product and the cross product. Each has an algebraic definition, but their geometric properties are what motivate their usage. We begin by discussing the dot product.\n\n\nThe dot product between two vectors can be viewed algebraically in terms of the following product. If $\\vec{v} = \\langle v_1, v_2, \\dots, v_n\\rangle$ and $\\vec{w} = \\langle w_1, w_2, \\dots, w_n\\rangle$, then the *dot product* of $\\vec{v}$ and $\\vec{w}$ is defined by:\n\n\n\n$$\n\\vec{v} \\cdot \\vec{w} = v_1 w_1 + v_2 w_2 + \\cdots + v_n w_n.\n$$\n\n\nFrom this, we can see the relationship between the norm, or Euclidean length of a vector: $\\vec{v} \\cdot \\vec{v} = \\| \\vec{v} \\|^2$. We can also see that the dot product is commutative, that is $\\vec{v} \\cdot \\vec{w} = \\vec{w} \\cdot \\vec{v}$.\n\n\nThe dot product has an important geometrical interpolation. Two (non-parallel) vectors will lie in the same \"plane\", even in higher dimensions. Within this plane, there will be an angle between them within $[0, \\pi]$. Call this angle $\\theta$. (This means the angle between the two vectors is the same regardless of their order of consideration.) Then\n\n\n\n$$\n\\vec{v} \\cdot \\vec{w} = \\|\\vec{v}\\| \\|\\vec{w}\\| \\cos(\\theta).\n$$\n\n\nIf we denoted $\\hat{v} = \\vec{v} / \\| \\vec{v} \\|$, the unit vector in the direction of $\\vec{v}$, then by dividing, we see that $\\cos(\\theta) = \\hat{v} \\cdot \\hat{w}$. That is the angle does not depend on the magnitude of the vectors involved.\n\n\nThe dot product is computed in `Julia` by the `dot` function, which is in the `LinearAlgebra` package of the standard library. This must be loaded (as above) before its use either directly or through the `CalculusWithJulia` package:\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\n𝒖 = [1, 2]\n𝒗 = [2, 1]\ndot(𝒖, 𝒗)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n4\n```\n:::\n:::\n\n\n:::{.callout-note}\n## Note\nIn `Julia`, the unicode operator entered by `\\cdot[tab]` can also be used to mirror the math notation:\n\n:::\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\n𝒖 ⋅ 𝒗   # u \\cdot[tab] v\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n4\n```\n:::\n:::\n\n\nContinuing, to find the angle between $\\vec{u}$ and $\\vec{v}$, we might do this:\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\n𝒄theta = dot(𝒖/norm(𝒖), 𝒗/norm(𝒗))\nacos(𝒄theta)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n0.6435011087932845\n```\n:::\n:::\n\n\nThe cosine of $\\pi/2$ is $0$, so two vectors which are at right angles to each other will have a dot product of  $0$:\n\n::: {.cell hold='true' execution_count=19}\n``` {.julia .cell-code}\nu = [1, 2]\nv = [2, -1]\nu ⋅ v\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n0\n```\n:::\n:::\n\n\nIn two dimensions, we learn that a perpendicular line to a line with slope $m$ will have slope $-1/m$. From a $2$-dimensional vector, say $\\vec{u} = \\langle u_1, u_2 \\rangle$, the slope is $u_2/u_1$ so a perpendicular vector to $\\vec{u}$ will be $\\langle u_2, -u_1 \\rangle$, as above. For higher dimensions, where the angle is harder to visualize, the dot product defines perpendicularness, or *orthogonality*.\n\n\nFor example, these two vectors are orthogonal, as their dot product is $0$, even though we can't readily visualize them:\n\n::: {.cell hold='true' execution_count=20}\n``` {.julia .cell-code}\nu = [1, 2, 3, 4, 5]\nv = [-30, 4, 3, 2, 1]\nu ⋅ v\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n0\n```\n:::\n:::\n\n\n#### Projection\n\n\nFrom right triangle trigonometry, we learn that $\\cos(\\theta) = \\text{adjacent}/\\text{hypotenuse}$. If we use a vector, $\\vec{h}$ for the hypotenuse, and $\\vec{a} = \\langle 1, 0 \\rangle$, we have this picture:\n\n::: {.cell hold='true' execution_count=21}\n``` {.julia .cell-code}\nh = [2, 3]\na = [1, 0]  # unit vector\nh_hat = h / norm(h)\ntheta = acos(h_hat ⋅ a)\n\nplot(legend=false)\narrow!([0,0], h)\narrow!([0,0], norm(h) * cos(theta) * a)\narrow!([0,0], a, linewidth=3)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n![](vectors_files/figure-html/cell-22-output-1.svg){}\n:::\n:::\n\n\nWe used vectors to find the angle made by `h`, and from there, using the length of the hypotenuse is `norm(h)`, we can identify the length of the adjacent side, it being the length of the hypotenuse times the cosine of $\\theta$. Geometrically, we call the vector `norm(h) * cos(theta) * a` the *projection* of $\\vec{h}$ onto $\\vec{a}$, the word coming from the shadow $\\vec{h}$ would cast on the direction of $\\vec{a}$ were there light coming perpendicular to $\\vec{a}$.\n\n\nThe projection can be made for any pair of vectors, and in any dimension $n > 1$. The projection of $\\vec{u}$ on $\\vec{v}$ would be a vector of length $\\vec{u}$ (the hypotenuse) times the cosine of the angle in the direction of $\\vec{v}$. In dot-product notation:\n\n\n\n$$\nproj_{\\vec{v}}(\\vec{u}) = \\| \\vec{u} \\| \\frac{\\vec{u}\\cdot\\vec{v}}{\\|\\vec{u}\\|\\|\\vec{v}\\|} \\frac{\\vec{v}}{\\|\\vec{v}\\|}.\n$$\n\n\nThis can simplify. After cancelling, and expressing norms in terms of dot products, we have:\n\n\n\n$$\nproj_{\\vec{v}}(\\vec{u}) = \\frac{\\vec{u} \\cdot \\vec{v}}{\\vec{v} \\cdot \\vec{v}} \\vec{v} = (\\vec{u} \\cdot \\hat{v}) \\hat{v},\n$$\n\n\nwhere $\\hat{v}$ is the unit vector in the direction of $\\vec{v}$.\n\n\n##### Example\n\n\nA pendulum, a bob on a string, swings back and forth due to the force of gravity. When the bob is displaced from rest by an angle $\\theta$, then the tension force of the string on the bob is directed along the string and has magnitude given by the *projection* of the force due to gravity.\n\n\nA [force diagram](https://en.wikipedia.org/wiki/Free_body_diagram) is a useful visualization device of physics to illustrate the applied forces involved in a scenario. In this case the bob has two forces acting on it: a force due to tension in the string of unknown magnitude, but in the direction of the string; and a force due to gravity. The latter is in the downward direction and has magnitude $mg$, $g=9.8m/sec^2$ being the gravitational constant.\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\n𝗍heta = pi/12\n𝗆ass, 𝗀ravity = 1/9.8, 9.8\n\n𝗅 = [-sin(𝗍heta), cos(𝗍heta)]\n𝗉 = -𝗅\n𝖥g = [0, -𝗆ass * 𝗀ravity]\nplot(legend=false)\narrow!(𝗉, 𝗅)\narrow!(𝗉, 𝖥g)\nscatter!(𝗉[1:1], 𝗉[2:2], markersize=5)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n![](vectors_files/figure-html/cell-23-output-1.svg){}\n:::\n:::\n\n\nThe magnitude of the tension force is exactly that of the force of gravity projected onto $\\vec{l}$, as the bob is not accelerating in that direction. The component of the gravity force in the perpendicular direction is the part of the gravitational force that causes acceleration in the pendulum. Here we find the projection onto $\\vec{l}$ and visualize the two components of the gravitational force.\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\nplot(legend=false, aspect_ratio=:equal)\narrow!(𝗉, 𝗅)\narrow!(𝗉, 𝖥g)\nscatter!(𝗉[1:1], 𝗉[2:2], markersize=5)\n\n𝗉roj = (𝖥g ⋅ 𝗅) / (𝗅 ⋅ 𝗅) * 𝗅   # force of gravity in direction of tension\n𝗉orth = 𝖥g - 𝗉roj              # force of gravity perpendicular to tension\n\narrow!(𝗉, 𝗉roj)\narrow!(𝗉, 𝗉orth, linewidth=3)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n![](vectors_files/figure-html/cell-24-output-1.svg){}\n:::\n:::\n\n\n##### Example\n\n\nStarting with three vectors, we can create three orthogonal vectors using projection and subtraction. The creation of `porth` above is the pattern we will exploit.\n\n\nLet's begin with three vectors in $R^3$:\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\nu = [1, 2, 3]\nv = [1, 1, 2]\nw = [1, 2, 4]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n3-element Vector{Int64}:\n 1\n 2\n 4\n```\n:::\n:::\n\n\nWe can find a vector from `v` orthogonal to `u` using:\n\n::: {.cell execution_count=25}\n``` {.julia .cell-code}\nunit_vec(u) = u / norm(u)\nprojection(u, v) = (u ⋅ unit_vec(v)) * unit_vec(v)\n\nvₚ = v - projection(v, u)\nwₚ = w - projection(w, u) - projection(w, vₚ)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n3-element Vector{Float64}:\n -0.33333333333333265\n -0.3333333333333336\n  0.33333333333333354\n```\n:::\n:::\n\n\nWe can verify the orthogonality through:\n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\nu ⋅ vₚ, u ⋅ wₚ, vₚ ⋅ wₚ\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n(-3.3306690738754696e-16, 8.881784197001252e-16, 3.677613769070831e-16)\n```\n:::\n:::\n\n\nThis only works when the three vectors do not all lie in the same plane. In general, this is the beginning of the [Gram-Schmidt](https://en.wikipedia.org/wiki/Gram-Schmidt_process) process for creating *orthogonal* vectors from a collection of vectors.\n\n\n#### Algebraic properties\n\n\nThe dot product is similar to multiplication, but different, as it is an operation defined between vectors of the same dimension. However, many algebraic properties carry over:\n\n\n  * commutative: $\\vec{u} \\cdot \\vec{v} = \\vec{v} \\cdot \\vec{u}$\n  * scalar multiplication: $(c\\vec{u})\\cdot\\vec{v} = c(\\vec{u}\\cdot\\vec{v})$.\n  * distributive $\\vec{u} \\cdot (\\vec{v} + \\vec{w}) = \\vec{u} \\cdot \\vec{v} + \\vec{u} \\cdot \\vec{w}$\n\n\nThe last two can be combined: $\\vec{u}\\cdot(s \\vec{v} + t \\vec{w}) = s(\\vec{u}\\cdot\\vec{v}) + t (\\vec{u}\\cdot\\vec{w})$.\n\n\nBut the associative property does not make sense, as $(\\vec{u} \\cdot \\vec{v}) \\cdot \\vec{w}$ does not make sense as two dot products: the result of the first is not a vector, but a scalar.\n\n\n## Matrices\n\n\nAlgebraically, the dot product of two vectors - pair off by components, multiply these, then add - is a common operation. Take for example, the general equation of a line, or a plane:\n\n\n\n$$\nax + by  = c, \\quad ax + by + cz = d.\n$$\n\n\nThe left hand sides are in the form of a dot product, in this case $\\langle a,b \\rangle \\cdot \\langle x, y\\rangle$ and  $\\langle a,b,c \\rangle \\cdot \\langle x, y, z\\rangle$ respectively. When there is a system of equations, something like:\n\n\n\n$$\n\\begin{array}{}\n3x  &+& 4y  &- &5z &= 10\\\\\n3x  &-& 5y  &+ &7z &= 11\\\\\n-3x &+& 6y  &+ &9z &= 12,\n\\end{array}\n$$\n\n\nThen we might think of $3$ vectors $\\langle 3,4,-5\\rangle$, $\\langle 3,-5,7\\rangle$, and $\\langle -3,6,9\\rangle$ being dotted with $\\langle x,y,z\\rangle$. Mathematically, matrices and their associated algebra are used to represent this. In this example, the system of equations above would be represented by a matrix and two vectors:\n\n\n\n$$\nM = \\left[\n\\begin{array}{}\n3 & 4 & -5\\\\\n5 &-5 &  7\\\\\n-3& 6 & 9\n\\end{array}\n\\right],\\quad\n\\vec{x} = \\langle x, y , z\\rangle,\\quad\n\\vec{b} = \\langle 10, 11, 12\\rangle,\n$$\n\n\nand the expression $M\\vec{x} = \\vec{b}$. The matrix $M$ is a rectangular collection of numbers or expressions arranged in rows and columns with certain algebraic definitions. There are $m$ rows and $n$ columns in an $m\\times n$ matrix. In this example $m=n=3$, and in such a case the matrix is called square. A vector, like $\\vec{x}$ is usually identified with the $n \\times 1$ matrix (a column vector). Were that done, the system of equations would be written $Mx=b$.\n\n\nIf we refer to a matrix $M$ by its components, a convention is to use $(M)_{ij}$ or $m_{ij}$ to denote the entry in the $i$th *row* and $j$th *column*. Following `Julia`'s syntax, we would use $m_{i:}$ to refer to *all* entries in the $i$th row, and $m_{:j}$ to denote *all* entries in the $j$ column.\n\n\nIn addition to square matrices, there are some other common types of matrices worth naming: square matrices with $0$ entries below the diagonal are called upper triangular; square matrices with $0$ entries above the diagonal are called lower triangular matrices; square matrices which are $0$ except possibly along the diagonal are diagonal matrices; and a diagonal matrix whose diagonal entries are all $1$ is called an *identity matrix*.\n\n\nMatrices, like vectors, have scalar multiplication defined for them. then scalar multiplication of a matrix $M$ by $c$ just multiplies each entry by $c$, so the new matrix would have components defined by $cm_{ij}$.\n\n\nMatrices of the same size, like vectors, have addition defined for them. As with scalar multiplication, addition is defined component wise. So $A+B$ is the matrix with $ij$ entry $A_{ij} + B_{ij}$.\n\n\n### Matrix multiplication\n\n\nMatrix multiplication may be viewed as a collection of dot product operations. First, matrix multiplication is only  defined between $A$ and $B$, as $AB$, if the size of $A$ is $m\\times n$ and the size of $B$ is $n \\times k$. That is the number of columns of $A$ must match the number of rows of $B$ for the left multiplication of $AB$ to be defined. If this is so, then we have the $ij$ entry of $AB$ is:\n\n\n\n$$\n(AB)_{ij} = A_{i:} \\cdot B_{:j}.\n$$\n\n\nThat is, if we view the $i$th row of $A$ and the $j$th column of B as  *vectors*, then the $ij$ entry is the dot product.\n\n\nThis is why $M$ in the example above, has the coefficients for each equation in a row and not a column, and why $\\vec{x}$ is thought of as a $n\\times 1$ matrix (a column vector) and not as a row vector.\n\n\nMatrix multiplication between $A$ and $B$ is not, in general, commutative. Not only may the sizes not permit $BA$ to be found when $AB$ may be, there is just no guarantee when the sizes match that the components will be the same.\n\n\n---\n\nMatrices have other operations defined on them. We mention three here:\n\n\n  * The *transpose* of a matrix flips the difference between row and column, so the $ij$ entry of the transpose is the $ji$ entry of the matrix. This means the transpose will have size $n \\times m$ when $M$ has size $m \\times n$. Mathematically, the transpose is denoted $M^t$.\n  * The *determinant* of a *square* matrix is a number that can be used to characterize the matrix. The determinant may be computed different ways, but its [definition](https://en.wikipedia.org/wiki/Leibniz_formula_for_determinants) by the Leibniz formula is common. Two special cases are all we need. The $2\\times 2$ case and the $3 \\times 3$ case:\n\n\n\n$$\n\\left|\n\\begin{array}{}\na&b\\\\\nc&d\n\\end{array}\n\\right| =\nad - bc, \\quad\n\\left|\n\\begin{array}{}\na&b&c\\\\\nd&e&f\\\\\ng&h&i\n\\end{array}\n\\right| =\na \\left|\n\\begin{array}{}\ne&f\\\\\nh&i\n\\end{array}\n\\right|\n- b \\left|\n\\begin{array}{}\nd&f\\\\\ng&i\n\\end{array}\n\\right|\n+c \\left|\n\\begin{array}{}\nd&e\\\\\ng&h\n\\end{array}\n\\right|.\n$$\n\n\nThe $3\\times 3$ case shows how determinants may be [computed recursively](https://en.wikipedia.org/wiki/Determinant#Definition), using \"cofactor\" expansion.\n\n\n  * The *inverse* of a square matrix. If $M$ is a square matrix and its determinant is non-zero, then there is an *inverse* matrix, denoted $M^{-1}$, with the properties that $MM^{-1} = M^{-1}M = I$, where $I$ is the diagonal matrix of all $1$s called the identify matrix.\n\n\n### Matrices in Julia\n\n\nAs mentioned previously, a matrix in `Julia` is defined component by component with `[]`. We separate row entries with spaces and columns with semicolons:\n\n::: {.cell execution_count=27}\n``` {.julia .cell-code}\nℳ = [3 4 -5; 5 -5 7; -3 6 9]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n3×3 Matrix{Int64}:\n  3   4  -5\n  5  -5   7\n -3   6   9\n```\n:::\n:::\n\n\nSpace is the separator, which means computing a component during definition (i.e., writing `2 + 3` in place of `5`) can be problematic, as no space can be used in the computation, lest it be parsed as a separator.\n\n\nVectors are defined similarly. As they are identified with *column* vectors, we use a semicolon (or a comma with simple numbers) to separate:\n\n::: {.cell execution_count=28}\n``` {.julia .cell-code}\n𝒷 = [10, 11, 12]   # not 𝒷 = [10 11 12], which would be a row vector.\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n3-element Vector{Int64}:\n 10\n 11\n 12\n```\n:::\n:::\n\n\nIn `Julia`, entries in a matrix (or a vector) are stored in a container with a type wide enough accomodate each entry. In this example, the type is SymPy's `Sym` type:\n\n::: {.cell execution_count=29}\n``` {.julia .cell-code}\n@syms x1 x2 x3\n𝓍 = [x1, x2, x3]\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n3-element Vector{Sym}:\n x₁\n x₂\n x₃\n```\n:::\n:::\n\n\nMatrices may also be defined from blocks. This example shows how to make two column vectors into a matrix:\n\n::: {.cell execution_count=30}\n``` {.julia .cell-code}\n𝓊 = [10, 11, 12]\n𝓋 = [13, 14, 15]\n[𝓊 𝓋]   # horizontally combine\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n3×2 Matrix{Int64}:\n 10  13\n 11  14\n 12  15\n```\n:::\n:::\n\n\nVertically combining the two will stack them:\n\n::: {.cell execution_count=31}\n``` {.julia .cell-code}\n[𝓊; 𝓋]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n6-element Vector{Int64}:\n 10\n 11\n 12\n 13\n 14\n 15\n```\n:::\n:::\n\n\nScalar multiplication will just work as expected:\n\n::: {.cell execution_count=32}\n``` {.julia .cell-code}\n2 * ℳ\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n3×3 Matrix{Int64}:\n  6    8  -10\n 10  -10   14\n -6   12   18\n```\n:::\n:::\n\n\nMatrix addition is also straightforward:\n\n::: {.cell execution_count=33}\n``` {.julia .cell-code}\nℳ + ℳ\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n3×3 Matrix{Int64}:\n  6    8  -10\n 10  -10   14\n -6   12   18\n```\n:::\n:::\n\n\nMatrix addition expects matrices of the same size. An error will otherwise be thrown. However, if addition is *broadcasted* then the sizes need only be commensurate. For example, this will add `1` to each entry of `M`:\n\n::: {.cell execution_count=34}\n``` {.julia .cell-code}\nℳ .+ 1\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n3×3 Matrix{Int64}:\n  4   5  -4\n  6  -4   8\n -2   7  10\n```\n:::\n:::\n\n\nMatrix multiplication is defined by `*`:\n\n::: {.cell execution_count=35}\n``` {.julia .cell-code}\nℳ * ℳ\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n3×3 Matrix{Int64}:\n  44  -38  -32\n -31   87    3\n  -6   12  138\n```\n:::\n:::\n\n\nWe can then see how the system of equations is represented with matrices:\n\n::: {.cell execution_count=36}\n``` {.julia .cell-code}\nℳ * 𝓍 - 𝒷\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n3-element Vector{Sym}:\n  3⋅x₁ + 4⋅x₂ - 5⋅x₃ - 10\n  5⋅x₁ - 5⋅x₂ + 7⋅x₃ - 11\n -3⋅x₁ + 6⋅x₂ + 9⋅x₃ - 12\n```\n:::\n:::\n\n\nHere we use `SymPy` to verify the above:\n\n::: {.cell execution_count=37}\n``` {.julia .cell-code}\n𝒜 = [symbols(\"A$i$j\", real=true) for i in 1:3, j in 1:2]\nℬ = [symbols(\"B$i$j\", real=true) for i in 1:2, j in 1:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n2×2 Matrix{Sym}:\n B₁₁  B₁₂\n B₂₁  B₂₂\n```\n:::\n:::\n\n\nThe matrix product has the expected size: the number of rows of `A` ($3$) by the number of columns of `B` ($2$):\n\n::: {.cell execution_count=38}\n``` {.julia .cell-code}\n𝒜 * ℬ\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n3×2 Matrix{Sym}:\n A₁₁⋅B₁₁ + A₁₂⋅B₂₁  A₁₁⋅B₁₂ + A₁₂⋅B₂₂\n A₂₁⋅B₁₁ + A₂₂⋅B₂₁  A₂₁⋅B₁₂ + A₂₂⋅B₂₂\n A₃₁⋅B₁₁ + A₃₂⋅B₂₁  A₃₁⋅B₁₂ + A₃₂⋅B₂₂\n```\n:::\n:::\n\n\nThis confirms how each entry (`(A*B)[i,j]`) is from a dot product (`A[i,:]  ⋅ B[:,j]`):\n\n::: {.cell execution_count=39}\n``` {.julia .cell-code}\n[ (𝒜 * ℬ)[i,j] == 𝒜[i,:] ⋅ ℬ[:,j] for i in 1:3, j in 1:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n3×2 Matrix{Bool}:\n 1  1\n 1  1\n 1  1\n```\n:::\n:::\n\n\nWhen the multiplication is broadcasted though, with `.*`, the operation will be component wise:\n\n::: {.cell execution_count=40}\n``` {.julia .cell-code}\nℳ .* ℳ   # component wise (Hadamard product)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n3×3 Matrix{Int64}:\n  9  16  25\n 25  25  49\n  9  36  81\n```\n:::\n:::\n\n\n---\n\n\nThe determinant is found by `det` provided by the `LinearAlgebra` package:\n\n::: {.cell execution_count=41}\n``` {.julia .cell-code}\ndet(ℳ)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n-600.0000000000001\n```\n:::\n:::\n\n\n---\n\nThe transpose of a matrix is found through `transpose` which doesn't create a new object, but rather an object which knows to switch indices when referenced:\n\n::: {.cell execution_count=42}\n``` {.julia .cell-code}\ntranspose(ℳ)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n3×3 transpose(::Matrix{Int64}) with eltype Int64:\n  3   5  -3\n  4  -5   6\n -5   7   9\n```\n:::\n:::\n\n\nFor matrices with *real* numbers, the transpose can be performed with the postfix operation `'`:\n\n::: {.cell execution_count=43}\n``` {.julia .cell-code}\nℳ'\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n3×3 adjoint(::Matrix{Int64}) with eltype Int64:\n  3   5  -3\n  4  -5   6\n -5   7   9\n```\n:::\n:::\n\n\n(However, this is not true for matrices with complex numbers as `'` is the \"adjoint,\" that is, the transpose of the matrix *after* taking complex conjugates.)\n\n\nWith `u` and `v`, vectors from above, we have:\n\n::: {.cell execution_count=44}\n``` {.julia .cell-code}\n[𝓊' 𝓋']   # [𝓊 𝓋] was a 3 × 2 matrix, above\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n1×6 adjoint(::Vector{Int64}) with eltype Int64:\n 10  11  12  13  14  15\n```\n:::\n:::\n\n\nand\n\n::: {.cell execution_count=45}\n``` {.julia .cell-code}\n[𝓊'; 𝓋']\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n2×3 Matrix{Int64}:\n 10  11  12\n 13  14  15\n```\n:::\n:::\n\n\n::: {.cell execution_count=46}\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<div class=\"markdown\"><div class=\"admonition info\"><p class=\"admonition-title\">Info</p><p>The adjoint is defined <em>recursively</em> in <code>Julia</code>. In the <code>CalculusWithJulia</code> package, we overload the <code>&#39;</code> notation for <em>functions</em> to yield a univariate derivative found with automatic differentiation. This can lead to problems: if we have a matrix of functions, <code>M</code>, and took the transpose with <code>M&#39;</code>, then the entries of <code>M&#39;</code> would be the derivatives of the functions in <code>M</code> - not the original functions. This is very much likely to not be what is desired. The <code>CalculusWithJulia</code> package commits <strong>type piracy</strong> here <em>and</em> abuses the generic idea for <code>&#39;</code> in Julia. In general type piracy is very much frowned upon, as it can change expected behaviour. It is defined in <code>CalculusWithJulia</code>, as that package is intended only to act as a means to ease users into the wider package ecosystem of <code>Julia</code>.</p>\n</div>\n</div>\n```\n:::\n:::\n\n\n---\n\n\nThe dot product and matrix multiplication are related, and mathematically  identified through the relation: $\\vec{u} \\cdot \\vec{v} = u^t v$, where the right hand side identifies $\\vec{u}$ and $\\vec{v}$ with a $n\\times 1$ column matrix, and $u^t$ is the transpose, or a $1\\times n$ row matrix. However, mathematically the left side is a scalar, but the right side a $1\\times 1$ matrix. While distinct, the two are identified as the same. This is similar to the useful identification of a point and a vector. Within `Julia`, these identifications are context dependent. `Julia` stores vectors as $1$-dimensional arrays, transposes as $1$-dimensional objects, and matrices as $2$-dimensional arrays. The product of a transpose and a vector is a scalar:\n\n::: {.cell hold='true' execution_count=47}\n``` {.julia .cell-code}\nu, v = [1,1,2], [3,5,8]\nu' * v   # a scalar\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n24\n```\n:::\n:::\n\n\nBut if we make `u` a matrix (here  by \"`reshape`ing\" in a matrix with $1$ row and $3$ columns), we will get a matrix (actually a vector) in return:\n\n::: {.cell hold='true' execution_count=48}\n``` {.julia .cell-code}\nu, v = [1,1,2], [3,5,8]\nreshape(u,(1,3)) * v\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n1-element Vector{Int64}:\n 24\n```\n:::\n:::\n\n\n## Cross product\n\n\nIn three dimensions, there is a another operation between vectors that is similar to multiplication, though we will see with many differences.\n\n\nLet $\\vec{u}$ and $\\vec{v}$ be two $3$-dimensional vectors, then the *cross* product, $\\vec{u} \\times \\vec{v}$, is defined as a vector with length:\n\n\n\n$$\n\\| \\vec{u} \\times \\vec{v} \\| = \\| \\vec{u} \\| \\| \\vec{v} \\| \\sin(\\theta),\n$$\n\n\nwith $\\theta$ being the angle in $[0, \\pi]$ between $\\vec{u}$ and $\\vec{v}$. Consequently, $\\sin(\\theta) \\geq 0$.\n\n\nThe direction of the cross product is such that it is *orthogonal* to *both* $\\vec{u}$ and $\\vec{v}$. There are two such directions, to identify which is correct, the [right-hand rule](https://en.wikipedia.org/wiki/Cross_product#Definition) is used. This rule points the right hand fingers in the direction of $\\vec{u}$ and curls them towards $\\vec{v}$ (so that the angle between the two vectors is in $[0, \\pi]$). The thumb will point in the direction. Call this direction $\\hat{n}$, a normal unit vector. Then the cross product can be defined by:\n\n\n\n$$\n\\vec{u} \\times \\vec{v} =  \\| \\vec{u} \\| \\| \\vec{v} \\| \\sin(\\theta) \\hat{n}.\n$$\n\n::: {.cell execution_count=49}\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<div class=\"markdown\"><div class=\"admonition info\"><p class=\"admonition-title\">Info</p><p>The right-hand rule is also useful to understand how standard household screws will behave when twisted with a screwdriver. If the right hand fingers curl in the direction of the twisting screwdriver, then the screw will go in or out following the direction pointed to by the thumb.</p>\n</div>\n</div>\n```\n:::\n:::\n\n\nThe right-hand rule depends on the order of consideration of the vectors. If they are reversed, the opposite direction is determined. A consequence is that the cross product is **anti**-commutative, unlike multiplication:\n\n\n\n$$\n\\vec{u} \\times \\vec{v} = - \\vec{v} \\times \\vec{u}.\n$$\n\n\nMathematically, the definition in terms of its components is a bit involved:\n\n\n\n$$\n\\vec{u} \\times \\vec{v} = \\langle u_2 v_3 - u_3 v_2, u_3 v_1 - u_1 v_3, u_1 v_2 - u_2 v_1 \\rangle.\n$$\n\n\nThere is a matrix notation that can simplify this computation. If we *formally* define $\\hat{i}$, $\\hat{j}$, and $\\hat{k}$ to represent unit vectors in the $x$, $y$, and $z$ direction, then a vector $\\langle u_1, u_2, u_3 \\rangle$ could be written $u_1\\hat{i} + u_2\\hat{j} + u_3\\hat{k}$. With this the cross product of $\\vec{u}$ and $\\vec{v}$ is the vector associated with the *determinant* of the matrix\n\n\n\n$$\n\\left[\n\\begin{array}{}\n\\hat{i} & \\hat{j} & \\hat{k}\\\\\nu_1   & u_2   & u_3\\\\\nv_1   & v_2   & v_3\n\\end{array}\n\\right]\n$$\n\n\nFrom the $\\sin(\\theta)$ term in the definition, we see that $\\vec{u}\\times\\vec{u}=0$. In fact, the cross product is $0$ only if the two vectors involved are parallel or there is a zero vector.\n\n\nIn `Julia`, the `cross` function from the `LinearAlgebra` package implements the cross product. For example:\n\n::: {.cell execution_count=50}\n``` {.julia .cell-code}\n𝓪 = [1, 2, 3]\n𝓫 = [4, 2, 1]\ncross(𝓪, 𝓫)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n3-element Vector{Int64}:\n -4\n 11\n -6\n```\n:::\n:::\n\n\nThere is also the *infix* unicode operator `\\times[tab]` that can be used for similarity to traditional mathematical syntax.\n\n::: {.cell execution_count=51}\n``` {.julia .cell-code}\n𝓪 × 𝓫\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n3-element Vector{Int64}:\n -4\n 11\n -6\n```\n:::\n:::\n\n\nWe can see the cross product is anti-commutative by comparing the last answer with:\n\n::: {.cell execution_count=52}\n``` {.julia .cell-code}\n𝓫 × 𝓪\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n3-element Vector{Int64}:\n   4\n -11\n   6\n```\n:::\n:::\n\n\nUsing vectors of size different than $n=3$ produces a dimension mismatch error:\n\n::: {.cell execution_count=53}\n``` {.julia .cell-code}\n[1, 2] × [3, 4]\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: DimensionMismatch(\"cross product is only defined for vectors of length 3\")\n```\n:::\n:::\n\n\n(It can prove useful to pad $2$-dimensional vectors into $3$-dimensional vectors by adding a $0$ third component. We will see this in the discussion on curvature in the plane.)\n\n\nLet's see that the matrix definition will be identical (after identifications) to `cross`:\n\n::: {.cell execution_count=54}\n``` {.julia .cell-code}\n@syms î ĵ k̂\n𝓜 = [î ĵ k̂; 3 4 5; 3 6 7]\ndet(𝓜) |> simplify\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```{=html}\n<span class=\"math-left-align\" style=\"padding-left: 4px; width:0; float:left;\"> \n\\[\n6 k̂ - 2 î - 6 ĵ\n\\]\n</span>\n```\n:::\n:::\n\n\nCompare with\n\n::: {.cell execution_count=55}\n``` {.julia .cell-code}\n𝓜[2,:] × 𝓜[3,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n3-element Vector{Sym}:\n -2\n -6\n  6\n```\n:::\n:::\n\n\n---\n\nConsider this extended picture involving two vectors $\\vec{u}$ and $\\vec{v}$ drawn in two dimensions:\n\n::: {.cell execution_count=56}\n``` {.julia .cell-code}\nu₁ = [1, 2]\nv₁ = [2, 1]\np₁ = [0,0]\n\nplot(aspect_ratio=:equal)\narrow!(p₁, u₁)\narrow!(p₁, v₁)\narrow!(u₁, v₁)\narrow!(v₁, u₁)\n\npuv₁ = (u₁ ⋅ v₁) / (v₁ ⋅ v₁) * v₁\nporth₁ = u₁ - puv₁\narrow!(puv₁, porth₁)\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n![](vectors_files/figure-html/cell-57-output-1.svg){}\n:::\n:::\n\n\nThe enclosed shape is a parallelogram. To this we added the projection of $\\vec{u}$ onto $\\vec{v}$ (`puv`) and then the *orthogonal* part (`porth`).\n\n\nThe *area* of a parallelogram is the length of one side times the perpendicular height. The perpendicular height could be found from `norm(porth)`, so the area is:\n\n::: {.cell execution_count=57}\n``` {.julia .cell-code}\nnorm(v₁) * norm(porth₁)\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\n3.0\n```\n:::\n:::\n\n\nHowever, from trigonometry we have the height would also be the norm of $\\vec{u}$ times $\\sin(\\theta)$, a value that is given through the length of the cross product of $\\vec{u}$ and $\\hat{v}$, the unit vector, were these vectors viewed as $3$ dimensional by adding a $0$ third component. In formulas, this is also the case:\n\n\n\n$$\n\\text{area of the parallelogram} = \\| \\vec{u} \\times \\hat{v} \\| \\| \\vec{v} \\| = \\| \\vec{u} \\times \\vec{v} \\|.\n$$\n\n\nWe have, for our figure, after extending `u` and `v` to be three dimensional the area of the parallelogram:\n\n::: {.cell execution_count=58}\n``` {.julia .cell-code}\nu₂ = [1, 2, 0]\nv₂ = [2, 1, 0]\nnorm(u₂ × v₂)\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\n3.0\n```\n:::\n:::\n\n\n---\n\n\nThis analysis can be extended to the case of 3 vectors, which - when not co-planar - will form a *parallelepiped*.\n\n::: {.cell execution_count=59}\n``` {.julia .cell-code}\nu₃, v₃, w₃ = [1,2,3], [2,1,0], [1,1,2]\nplot()\np₃ = [0,0,0]\n\nplot(legend=false)\narrow!(p₃, u₃); arrow!(p₃, v₃); arrow!(p₃, w₃)\narrow!(u₃, v₃); arrow!(u₃, w₃)\narrow!(v₃, u₃); arrow!(v₃, w₃)\narrow!(w₃, u₃); arrow!(w₃, v₃)\narrow!(u₃ + v₃, w₃); arrow!(u₃ + w₃, v₃); arrow!(v₃ + w₃, u₃)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n![](vectors_files/figure-html/cell-60-output-1.svg){}\n:::\n:::\n\n\nThe volume of a parallelepiped is the area of a base parallelogram times the height of a perpendicular. If $\\vec{u}$ and $\\vec{v}$ form the base parallelogram, then the perpendicular will have height $\\|\\vec{w}\\| \\cos(\\theta)$ where the angle is the one made by $\\vec{w}$ with the normal, $\\vec{n}$. Since $\\vec{u} \\times \\vec{v} = \\| \\vec{u} \\times \\vec{v}\\|  \\hat{n} = \\hat{n}$ times the area of the base parallelogram, we have if we dot this answer with $\\vec{w}$:\n\n\n\n$$\n(\\vec{u} \\times \\vec{v}) \\cdot \\vec{w} =\n\\|\\vec{u} \\times \\vec{v}\\| (\\vec{n} \\cdot \\vec{w}) =\n\\|\\vec{u} \\times \\vec{v}\\| \\| \\vec{w}\\| \\cos(\\theta),\n$$\n\n\nthat is, the area of the parallelepiped. Wait, what about $(\\vec{v}\\times\\vec{u})\\cdot\\vec{w}$? That will have an opposite sign. Yes, in the above, there is an assumption that $\\vec{n}$ and $\\vec{w}$ have a an angle between them within $[0, \\pi/2]$, otherwise an absolute value must be used, as volume is non-negative.\n\n\n:::{.callout-note}\n## Orientation\nThe triple-scalar product, $\\vec{u}\\cdot(\\vec{v}\\times\\vec{w})$, gives the volume of the parallelepiped up to sign. If the sign of this is positive, the $3$ vectors are said to have a *positive* orientation, if the triple-scalar product is negative, the vectors have a *negative* orientation.\n\n:::\n\n#### Algebraic properties\n\n\nThe cross product has many properties, some different from regular multiplication:\n\n\n  * scalar multiplication: $(c\\vec{u})\\times\\vec{v} = c(\\vec{u}\\times\\vec{v})$\n  * distributive over addition: $\\vec{u} \\times (\\vec{v} + \\vec{w}) = \\vec{u}\\times\\vec{v} + \\vec{u}\\times\\vec{w}$.\n  * *anti*-commutative: $\\vec{u} \\times \\vec{v} = - \\vec{v} \\times \\vec{u}$\n  * *not* associative: that is there is no guarantee that $(\\vec{u}\\times\\vec{v})\\times\\vec{w}$ will be equivalent to $\\vec{u}\\times(\\vec{v}\\times\\vec{w})$.\n  * The triple cross product $(\\vec{u}\\times\\vec{v}) \\times \\vec{w}$ must be orthogonal to $\\vec{u}\\times\\vec{v}$ so lies in a plane with this as a normal vector. But, $\\vec{u}$ and $\\vec{v}$ will generate this plane, so it should be possible to express this triple product in terms of a sum involving $\\vec{u}$ and $\\vec{v}$ and indeed:\n\n\n\n$$\n(\\vec{u}\\times\\vec{v})\\times\\vec{w} = (\\vec{u}\\cdot\\vec{w})\\vec{v} - (\\vec{v}\\cdot\\vec{w})\\vec{u}.\n$$\n\n\n---\n\nThe following shows the algebraic properties stated above hold for symbolic vectors. First the linearity of the dot product:\n\n::: {.cell execution_count=60}\n``` {.julia .cell-code}\n@syms s₄ t₄ u₄[1:3]::real v₄[1:3]::real w₄[1:3]::real\n\nu₄ ⋅ (s₄ * v₄ + t₄ * w₄) - (s₄ * (u₄ ⋅ v₄) + t₄ * (u₄ ⋅ w₄)) |> simplify\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<span class=\"math-left-align\" style=\"padding-left: 4px; width:0; float:left;\"> \n\\[\n0\n\\]\n</span>\n```\n:::\n:::\n\n\nThis shows the dot product is commutative:\n\n::: {.cell execution_count=61}\n``` {.julia .cell-code}\n(u₄ ⋅ v₄) - (v₄ ⋅ u₄) |> simplify\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```{=html}\n<span class=\"math-left-align\" style=\"padding-left: 4px; width:0; float:left;\"> \n\\[\n0\n\\]\n</span>\n```\n:::\n:::\n\n\nThis shows the linearity of the cross product over scalar multiplication and vector addition:\n\n::: {.cell execution_count=62}\n``` {.julia .cell-code}\nu₄ × (s₄* v₄ + t₄ * w₄) - (s₄ * (u₄ × v₄) + t₄ * (u₄ × w₄)) .|> simplify\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n3-element Vector{Sym}:\n 0\n 0\n 0\n```\n:::\n:::\n\n\n(We use `.|>` to broadcast `simplify` over each component.)\n\n\nThe cross product is anti-commutative:\n\n::: {.cell execution_count=63}\n``` {.julia .cell-code}\nu₄ × v₄ + v₄ × u₄ .|> simplify\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n3-element Vector{Sym}:\n 0\n 0\n 0\n```\n:::\n:::\n\n\nbut not associative:\n\n::: {.cell execution_count=64}\n``` {.julia .cell-code}\nu₄ × (v₄ × w₄) - (u₄ × v₄) × w₄ .|> simplify\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n3-element Vector{Sym}:\n  u₄₁⋅v₄₂⋅w₄₂ + u₄₁⋅v₄₃⋅w₄₃ - u₄₂⋅v₄₂⋅w₄₁ - u₄₃⋅v₄₃⋅w₄₁\n -u₄₁⋅v₄₁⋅w₄₂ + u₄₂⋅v₄₁⋅w₄₁ + u₄₂⋅v₄₃⋅w₄₃ - u₄₃⋅v₄₃⋅w₄₂\n -u₄₁⋅v₄₁⋅w₄₃ - u₄₂⋅v₄₂⋅w₄₃ + u₄₃⋅v₄₁⋅w₄₁ + u₄₃⋅v₄₂⋅w₄₂\n```\n:::\n:::\n\n\nFinally we verify the decomposition of the triple cross product:\n\n::: {.cell execution_count=65}\n``` {.julia .cell-code}\n(u₄ × v₄) × w₄ - ( (u₄ ⋅ w₄) * v₄ - (v₄ ⋅ w₄) * u₄) .|> simplify\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\n3-element Vector{Sym}:\n 0\n 0\n 0\n```\n:::\n:::\n\n\n---\n\n\nThis table shows common usages of the symbols for various multiplication types: `*`, $\\cdot$, and $\\times$:\n\n\n|  Symbol  | inputs         | output      | type                   |\n|:--------:|:-------------- |:----------- |:---------------------- |\n|   `*`    | scalar, scalar | scalar      | regular multiplication |\n|   `*`    | scalar, vector | vector      | scalar multiplication  |\n|   `*`    | vector, vector | *undefined* |                        |\n| $\\cdot$  | scalar, scalar | scalar      | regular multiplication |\n| $\\cdot$  | scalar, vector | vector      | scalar multiplication  |\n| $\\cdot$  | vector, vector | scalar      | dot product            |\n| $\\times$ | scalar, scalar | scalar      | regular multiplication |\n| $\\times$ | scalar, vector | undefined   |                        |\n| $\\times$ | vector, vector | vector      | cross product ($3$D)   |\n\n\n##### Example: lines and planes\n\n\nA line in two dimensions satisfies the equation $ax + by = c$. Suppose $a$ and $b$ are non-zero. This can be represented in vector form, as the collection of all points associated to the vectors: $p + t \\vec{v}$ where $p$ is a point on the line, say $(0,c/b)$, and v is the vector $\\langle b, -a \\rangle$. We can verify, this for values of `t` as follows:\n\n::: {.cell hold='true' execution_count=66}\n``` {.julia .cell-code}\n@syms a b c x y t\n\neq = c - (a*x + b*y)\n\np = [0, c/b]\nv = [-b, a]\nli = p + t * v\n\neq(x=>li[1], y=>li[2]) |> simplify\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```{=html}\n<span class=\"math-left-align\" style=\"padding-left: 4px; width:0; float:left;\"> \n\\[\n0\n\\]\n</span>\n```\n:::\n:::\n\n\nLet $\\vec{n} = \\langle a , b \\rangle$, taken from the coefficients in the equation. We can see directly that $\\vec{n}$ is orthogonal to $\\vec{v}$. The line may then be seen as the collection of all vectors that are orthogonal to $\\vec{n}$ that have their tail at the point $p$.\n\n\nIn three dimensions, the equation of a plane is $ax + by + cz = d$. Suppose, $a$, $b$, and $c$ are non-zero, for simplicity. Setting $\\vec{n} = \\langle a,b,c\\rangle$ by comparison, it can be seen that plane is identified with the set of all vectors orthogonal to $\\vec{n}$ that are anchored at $p$.\n\n\nFirst, let $p = (0, 0, d/c)$ be a point on the plane. We find two vectors $u = \\langle -b, a, 0 \\rangle$ and $v = \\langle 0, c, -b \\rangle$. Then any point on the plane may be identified with the vector $p + s\\vec{u} + t\\vec{v}$. We can verify this algebraically through:\n\n::: {.cell hold='true' execution_count=67}\n``` {.julia .cell-code}\n@syms a b c d x y z s t\n\neq = d - (a*x + b*y + c * z)\n\np = [0, 0, d/c]\nu, v = [-b, a, 0], [0, c, -b]\npl = p + t * u + s * v\n\nsubs(eq, x=>pl[1], y=>pl[2], z=>pl[3]) |> simplify\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<span class=\"math-left-align\" style=\"padding-left: 4px; width:0; float:left;\"> \n\\[\n0\n\\]\n</span>\n```\n:::\n:::\n\n\nThe above viewpoint can be reversed:\n\n\n> a plane is determined by two (non-parallel) vectors and a point.\n\n\n\nThe parameterized version of the plane would be $p + t \\vec{u} + s \\vec{v}$, as used above.\n\n\nThe equation of the plane can be given from $\\vec{u}$ and $\\vec{v}$. Let $\\vec{n} = \\vec{u} \\times \\vec{v}$. Then $\\vec{n} \\cdot \\vec{u} = \\vec{n} \\cdot \\vec{v} = 0$, from the properties of the cross product. As such, $\\vec{n} \\cdot (s \\vec{u} + t \\vec{v}) = 0$. That is, the cross product is orthogonal to any *linear* combination of the two vectors. This figure shows one such linear combination:\n\n::: {.cell hold='true' execution_count=68}\n``` {.julia .cell-code}\nu = [1,2,3]\nv = [2,3,1]\nn = u × v\np = [0,0,1]\n\nplot(legend=false)\n\narrow!(p, u)\narrow!(p, v)\narrow!(p + u, v)\narrow!(p + v, u)\narrow!(p, n)\n\ns, t = 1/2, 1/4\narrow!(p, s*u + t*v)\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n![](vectors_files/figure-html/cell-69-output-1.svg){}\n:::\n:::\n\n\nSo if $\\vec{n} \\cdot p = d$ (identifying the point $p$ with a vector so the dot product is defined), we will have for any vector $\\vec{v} = \\langle x, y, z \\rangle = s \\vec{u} + t \\vec{v}$ that\n\n\n\n$$\n\\vec{n} \\cdot (p + s\\vec{u} + t \\vec{v}) = \\vec{n} \\cdot p + \\vec{n} \\cdot (s \\vec{u} + t \\vec{v}) = d + 0 = d,\n$$\n\n\nBut if $\\vec{n} = \\langle a, b, c \\rangle$, then this says $d = ax + by + cz$, so from $\\vec{n}$ and $p$ the equation of the plane is given.\n\n\nIn summary:\n\n\n| Object |      Equation      | vector equation                  |\n|:------ |:------------------:|:-------------------------------- |\n| Line   |   $ax + by = c$    | line: $p + t\\vec{u}$             |\n| Plane  | $ax + by + cz = d$ | plane: $p + s\\vec{u} + t\\vec{v}$ |\n\n\n---\n\n##### Example\n\n\nYou are given that the vectors $\\vec{u} =\\langle 6, 3, 1 \\rangle$ and $\\vec{v} = \\langle 3, 2, 1 \\rangle$ describe a plane through the point $p=[1,1,2]$. Find the equation of the plane.\n\n\nThe key is to find the normal vector to the plane, $\\vec{n} = \\vec{u} \\times \\vec{v}$:\n\n::: {.cell hold='true' execution_count=69}\n``` {.julia .cell-code}\nu, v, p = [6,3,1], [3,2,1], [1,1,2]\nn = u × v\na, b, c = n\nd = n ⋅ p\n\"equation of plane: $a x + $b y + $c z = $d\"\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n\"equation of plane: 1 x + -3 y + 3 z = 4\"\n```\n:::\n:::\n\n\n## Questions\n\n\n###### Question\n\n\nLet `u=[1,2,3]`, `v=[4,3,2]`, and `w=[5,2,1]`.\n\n\nFind `u ⋅ v`:\n\n::: {.cell hold='true' execution_count=70}\n\n::: {.cell-output .cell-output-display execution_count=71}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3476111483130562264' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3476111483130562264\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"3476111483130562264\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3476111483130562264_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"3476111483130562264\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 16) <= 0);\n  var msgBox = document.getElementById('3476111483130562264_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3476111483130562264\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3476111483130562264\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\nAre `v` and `w` orthogonal?\n\n::: {.cell hold='true' execution_count=71}\n\n::: {.cell-output .cell-output-display execution_count=72}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='4138770018386309113' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_4138770018386309113\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4138770018386309113_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4138770018386309113\"\n              id=\"radio_4138770018386309113_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4138770018386309113_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4138770018386309113\"\n              id=\"radio_4138770018386309113_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='4138770018386309113_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_4138770018386309113\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('4138770018386309113_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_4138770018386309113\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_4138770018386309113\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nFind the angle between `u` and `w`:\n\n::: {.cell hold='true' execution_count=72}\n\n::: {.cell-output .cell-output-display execution_count=73}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='9430246043183611885' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_9430246043183611885\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"9430246043183611885\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='9430246043183611885_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"9430246043183611885\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 0.945250237728822) <= 0.001);\n  var msgBox = document.getElementById('9430246043183611885_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_9430246043183611885\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_9430246043183611885\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\nFind `u ×  v`:\n\n::: {.cell hold='true' execution_count=73}\n\n::: {.cell-output .cell-output-display execution_count=74}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16739473559933259285' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16739473559933259285\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16739473559933259285_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16739473559933259285\"\n              id=\"radio_16739473559933259285_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#91;-5, 10, -5&#93;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16739473559933259285_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16739473559933259285\"\n              id=\"radio_16739473559933259285_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#91;-4, 14, -8&#93;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16739473559933259285_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16739473559933259285\"\n              id=\"radio_16739473559933259285_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>&#91;-1, 6, -7&#93;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16739473559933259285_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_16739473559933259285\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('16739473559933259285_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16739473559933259285\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16739473559933259285\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nFind the area of the parallelogram formed by `v` and `w`\n\n::: {.cell hold='true' execution_count=74}\n\n::: {.cell-output .cell-output-display execution_count=75}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='3669614974816649294' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_3669614974816649294\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"3669614974816649294\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='3669614974816649294_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"3669614974816649294\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 9.273618495495704) <= 0.001);\n  var msgBox = document.getElementById('3669614974816649294_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_3669614974816649294\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_3669614974816649294\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\nFind the  volume of the parallelepiped formed by `u`, `v`, and `w`:\n\n::: {.cell hold='true' execution_count=75}\n\n::: {.cell-output .cell-output-display execution_count=76}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='13074020443854739884' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_13074020443854739884\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"13074020443854739884\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='13074020443854739884_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"13074020443854739884\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 10) <= 0);\n  var msgBox = document.getElementById('13074020443854739884_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_13074020443854739884\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_13074020443854739884\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe dot product of two vectors may be described in words: pair off the corresponding values, multiply them, then add. In `Julia` the `zip` command will pair off two iterable objects, like vectors, so it seems like this command: `sum(prod.(zip(u,v)))` will find a dot product. Investigate  if it is does or doesn't by testing the following command and comparing to the dot product:\n\n``` {.julia .cell-code}\nu,v = [1,2,3], [5,4,2]\nsum(prod.(zip(u,v)))\n```\n\n\nDoes this return the same answer:\n\n::: {.cell hold='true' execution_count=77}\n\n::: {.cell-output .cell-output-display execution_count=77}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='14447523952442727466' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_14447523952442727466\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14447523952442727466_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14447523952442727466\"\n              id=\"radio_14447523952442727466_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Yes\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_14447523952442727466_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_14447523952442727466\"\n              id=\"radio_14447523952442727466_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        No\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='14447523952442727466_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_14447523952442727466\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('14447523952442727466_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_14447523952442727466\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_14447523952442727466\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nWhat does command `zip(u,v)` return?\n\n::: {.cell hold='true' execution_count=78}\n\n::: {.cell-output .cell-output-display execution_count=78}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='6845531799720231051' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_6845531799720231051\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6845531799720231051_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6845531799720231051\"\n              id=\"radio_6845531799720231051_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        An object of type <code>Base.Iterators.Zip</code> that is only realized when used\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6845531799720231051_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6845531799720231051\"\n              id=\"radio_6845531799720231051_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        A vector of values <code>&#91;&#40;1, 5&#41;, &#40;2, 4&#41;, &#40;3, 2&#41;&#93;</code>\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='6845531799720231051_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_6845531799720231051\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('6845531799720231051_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_6845531799720231051\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_6845531799720231051\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nWhat does `prod.(zip(u,v))` return?\n\n::: {.cell hold='true' execution_count=79}\n\n::: {.cell-output .cell-output-display execution_count=79}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11899033822413861879' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11899033822413861879\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11899033822413861879_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11899033822413861879\"\n              id=\"radio_11899033822413861879_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        A vector of values <code>&#91;5, 8, 6&#93;</code>\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11899033822413861879_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11899033822413861879\"\n              id=\"radio_11899033822413861879_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        An object of type <code>Base.Iterators.Zip</code> that when realized will produce a vector of values\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11899033822413861879_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_11899033822413861879\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('11899033822413861879_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11899033822413861879\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11899033822413861879\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nLet $\\vec{u}$ and $\\vec{v}$ be 3-dimensional **unit** vectors. What is the value of\n\n\n\n$$\n(\\vec{u} \\times \\vec{v}) \\cdot (\\vec{u} \\times \\vec{v}) + (\\vec{u} \\cdot \\vec{v})^2?\n$$\n\n::: {.cell hold='true' execution_count=80}\n\n::: {.cell-output .cell-output-display execution_count=80}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='12889018412879596773' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_12889018412879596773\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12889018412879596773_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12889018412879596773\"\n              id=\"radio_12889018412879596773_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(0\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12889018412879596773_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12889018412879596773\"\n              id=\"radio_12889018412879596773_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Can&#39;t say in general\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_12889018412879596773_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_12889018412879596773\"\n              id=\"radio_12889018412879596773_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(1\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='12889018412879596773_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_12889018412879596773\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('12889018412879596773_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_12889018412879596773\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_12889018412879596773\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nConsider the projection of $\\langle 1, 2, 3\\rangle$ on $\\langle 3, 2, 1\\rangle$. What is its length?\n\n::: {.cell hold='true' execution_count=81}\n\n::: {.cell-output .cell-output-display execution_count=81}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11671641400750349364' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11671641400750349364\">\n        <div style=\"padding-top: 5px\">\n    </br>\n<div class=\"input-group\">\n    <input id=\"11671641400750349364\" type=\"number\" class=\"form-control\" placeholder=\"Numeric answer\">\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11671641400750349364_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.getElementById(\"11671641400750349364\").addEventListener(\"change\", function() {\n  var correct = (Math.abs(this.value - 2.6726124191242437) <= 0.001);\n  var msgBox = document.getElementById('11671641400750349364_message');\n    if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11671641400750349364\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11671641400750349364\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nLet $\\vec{u} = \\langle 1, 2, 3 \\rangle$ and $\\vec{v} = \\langle 3, 2, 1 \\rangle$. Describe the plane created by these two non-parallel vectors going through the origin.\n\n::: {.cell hold='true' execution_count=82}\n\n::: {.cell-output .cell-output-display execution_count=82}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='6664920804271897070' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_6664920804271897070\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6664920804271897070_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6664920804271897070\"\n              id=\"radio_6664920804271897070_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(x + 2y + 3z = 6\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6664920804271897070_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6664920804271897070\"\n              id=\"radio_6664920804271897070_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(x + 2y + z = 0\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6664920804271897070_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6664920804271897070\"\n              id=\"radio_6664920804271897070_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(-4x + 8y - 4z = 0\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='6664920804271897070_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_6664920804271897070\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('6664920804271897070_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_6664920804271897070\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_6664920804271897070\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nA plane $P_1$ is *orthogonal* to $\\vec{n}_1$, a plane $P_2$ is *orthogonal* to $\\vec{n}_2$. Explain why vector $\\vec{v} = \\vec{n}_1 \\times \\vec{n}_2$ is parallel to the *intersection* of $P_1$ and $P_2$.\n\n::: {.cell hold='true' execution_count=83}\n\n::: {.cell-output .cell-output-display execution_count=83}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17550573117634723053' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17550573117634723053\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17550573117634723053_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17550573117634723053\"\n              id=\"radio_17550573117634723053_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{v}\\) is in plane \\(P_1\\), as it is orthogonal to \\(\\vec{n}_1\\) and \\(P_2\\) as it is orthogonal to \\(\\vec{n}_2\\), hence it is parallel to both planes.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17550573117634723053_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17550573117634723053\"\n              id=\"radio_17550573117634723053_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{n}_1\\) and \\(\\vec{n_2}\\) are unit vectors, so the cross product gives the projection, which must be orthogonal to each vector, hence in the intersection\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17550573117634723053_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_17550573117634723053\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('17550573117634723053_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17550573117634723053\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17550573117634723053\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\n(From Strang). For an (analog) clock draw vectors from the center out to each of the 12 hours marked on the clock. What is the vector sum of these 12 vectors?\n\n::: {.cell hold='true' execution_count=84}\n\n::: {.cell-output .cell-output-display execution_count=84}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16572809186718742952' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16572809186718742952\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16572809186718742952_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16572809186718742952\"\n              id=\"radio_16572809186718742952_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\langle 12, 12 \\rangle\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16572809186718742952_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16572809186718742952\"\n              id=\"radio_16572809186718742952_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{0}\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16572809186718742952_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16572809186718742952\"\n              id=\"radio_16572809186718742952_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(12 \\langle 1, 0 \\rangle\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16572809186718742952_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_16572809186718742952\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('16572809186718742952_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16572809186718742952\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16572809186718742952\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nIf the vector to 3 o'clock is removed, (call this $\\langle 1, 0 \\rangle$) what expresses the sum of *all* the remaining vectors?\n\n::: {.cell hold='true' execution_count=85}\n\n::: {.cell-output .cell-output-display execution_count=85}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='37405772414444189' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_37405772414444189\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_37405772414444189_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_37405772414444189\"\n              id=\"radio_37405772414444189_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\langle 1, 0 \\rangle\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_37405772414444189_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_37405772414444189\"\n              id=\"radio_37405772414444189_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\langle -1, 0 \\rangle\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_37405772414444189_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_37405772414444189\"\n              id=\"radio_37405772414444189_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\langle 11, 11 \\rangle\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='37405772414444189_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_37405772414444189\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('37405772414444189_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_37405772414444189\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_37405772414444189\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nLet $\\vec{u}$ and $\\vec{v}$ be unit vectors. Let $\\vec{w} = \\vec{u} + \\vec{v}$. Then $\\vec{u} \\cdot \\vec{w} = \\vec{v} \\cdot \\vec{w}$. What is the value?\n\n::: {.cell hold='true' execution_count=86}\n\n::: {.cell-output .cell-output-display execution_count=86}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7447963797008522055' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7447963797008522055\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7447963797008522055_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7447963797008522055\"\n              id=\"radio_7447963797008522055_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{u} + \\vec{v}\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7447963797008522055_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7447963797008522055\"\n              id=\"radio_7447963797008522055_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(1 + \\vec{u}\\cdot\\vec{v}\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7447963797008522055_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7447963797008522055\"\n              id=\"radio_7447963797008522055_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{u}\\cdot\\vec{v} + \\vec{v}\\cdot \\vec{v}\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='7447963797008522055_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_7447963797008522055\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('7447963797008522055_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7447963797008522055\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7447963797008522055\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\nAs the two are equal, which interpretation is true?\n\n::: {.cell hold='true' execution_count=87}\n\n::: {.cell-output .cell-output-display execution_count=87}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='1633198183573053248' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_1633198183573053248\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1633198183573053248_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1633198183573053248\"\n              id=\"radio_1633198183573053248_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The vector \\(\\vec{w}\\) must also be a unit vector\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1633198183573053248_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1633198183573053248\"\n              id=\"radio_1633198183573053248_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The angle they make with \\(\\vec{w}\\) is the same\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_1633198183573053248_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_1633198183573053248\"\n              id=\"radio_1633198183573053248_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        the two are orthogonal\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='1633198183573053248_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_1633198183573053248\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('1633198183573053248_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_1633198183573053248\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_1633198183573053248\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nSuppose $\\| \\vec{u} + \\vec{v} \\|^2 = \\|\\vec{u}\\|^2 + \\|\\vec{v}\\|^2$. What is $\\vec{u}\\cdot\\vec{v}$?\n\n\nWe have $(\\vec{u} + \\vec{v})\\cdot(\\vec{u} + \\vec{v}) = \\vec{u}\\cdot \\vec{u} + 2 \\vec{u}\\cdot\\vec{v} + \\vec{v}\\cdot\\vec{v}$. From this, we can infer that:\n\n::: {.cell hold='true' execution_count=88}\n\n::: {.cell-output .cell-output-display execution_count=88}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11950407711534668021' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11950407711534668021\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11950407711534668021_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11950407711534668021\"\n              id=\"radio_11950407711534668021_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{u}\\cdot\\vec{v} = 2\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11950407711534668021_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11950407711534668021\"\n              id=\"radio_11950407711534668021_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{u}\\cdot\\vec{v} = 0\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11950407711534668021_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11950407711534668021\"\n              id=\"radio_11950407711534668021_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{u}\\cdot\\vec{v} = -(\\vec{u}\\cdot\\vec{u} \\vec{v}\\cdot\\vec{v})\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11950407711534668021_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_11950407711534668021\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('11950407711534668021_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11950407711534668021\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11950407711534668021\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nGive a geometric reason for this identity:\n\n\n\n$$\n\\vec{u} \\cdot (\\vec{v} \\times \\vec{w}) =\n\\vec{v} \\cdot (\\vec{w} \\times \\vec{u}) =\n\\vec{w} \\cdot (\\vec{u} \\times \\vec{v})\n$$\n\n::: {.cell hold='true' execution_count=89}\n\n::: {.cell-output .cell-output-display execution_count=89}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='11979761097462744112' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_11979761097462744112\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11979761097462744112_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11979761097462744112\"\n              id=\"radio_11979761097462744112_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The vectors are all unit lengths, so these are all 1\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11979761097462744112_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11979761097462744112\"\n              id=\"radio_11979761097462744112_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The triple product describes a volume up to sign, this combination preserves the sign\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_11979761097462744112_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_11979761097462744112\"\n              id=\"radio_11979761097462744112_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        The vectors are <em>orthogonal</em>, so these are all zero\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='11979761097462744112_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_11979761097462744112\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('11979761097462744112_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_11979761097462744112\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_11979761097462744112\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nSnell's law in planar form is $n_1\\sin(\\theta_1) = n_2\\sin(\\theta_2)$ where $n_i$ is a constant depending on the medium.\n\n::: {.cell hold='true' execution_count=90}\n\n::: {.cell-output .cell-output-display execution_count=90}\n![](vectors_files/figure-html/cell-91-output-1.svg){}\n:::\n:::\n\n\nIn vector form, we can express it using *unit* vectors through:\n\n::: {.cell hold='true' execution_count=91}\n\n::: {.cell-output .cell-output-display execution_count=91}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='16028951344251118634' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_16028951344251118634\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16028951344251118634_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16028951344251118634\"\n              id=\"radio_16028951344251118634_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(n_1 (\\hat{v_1}\\times\\hat{N}) = -n_2  (\\hat{v_2}\\times\\hat{N})\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_16028951344251118634_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_16028951344251118634\"\n              id=\"radio_16028951344251118634_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(n_1 (\\hat{v_1}\\times\\hat{N}) = n_2  (\\hat{v_2}\\times\\hat{N})\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='16028951344251118634_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_16028951344251118634\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('16028951344251118634_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_16028951344251118634\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_16028951344251118634\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n###### Question\n\n\nThe Jacobi relationship show that for *any* $3$ randomly chosen vectors:\n\n\n\n$$\n\\vec{a}\\times(\\vec{b}\\times\\vec{c})+\n\\vec{b}\\times(\\vec{c}\\times\\vec{a})+\n\\vec{c}\\times(\\vec{a}\\times\\vec{b})\n$$\n\n\nsimplifies. To what? (Use `SymPy` or randomly generated vectors to see.)\n\n::: {.cell hold='true' execution_count=92}\n\n::: {.cell-output .cell-output-display execution_count=92}\n```{=html}\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='17323355789888571120' data-controltype=''>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_17323355789888571120\">\n        <div style=\"padding-top: 5px\">\n    <div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17323355789888571120_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17323355789888571120\"\n              id=\"radio_17323355789888571120_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{a}\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17323355789888571120_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17323355789888571120\"\n              id=\"radio_17323355789888571120_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{a} + \\vec{b} + \\vec{c}\\)\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_17323355789888571120_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_17323355789888571120\"\n              id=\"radio_17323355789888571120_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        \\(\\vec{0}\\)\n      </span>\n    </label>\n</div>\n\n    \n        </div>\n      </div>\n      <div id='17323355789888571120_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_17323355789888571120\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('17323355789888571120_message');\n      if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> 👍&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_17323355789888571120\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>👎&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_17323355789888571120\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "vectors_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}